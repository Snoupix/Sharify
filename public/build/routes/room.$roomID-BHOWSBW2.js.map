{
  "version": 3,
  "sources": ["../../../app/routes/room.$roomID.tsx", "../../../app/components/hostRoom.tsx", "../../../app/components/clientRoom.tsx"],
  "sourcesContent": ["import { useCallback, useEffect, useReducer, useRef, useState } from \"react\";\r\nimport { useFetcher, useLoaderData, useNavigate, useOutletContext } from \"@remix-run/react\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport type { LoaderFunction, ActionFunction } from \"@remix-run/node\";\r\nimport { redirect, json } from \"@remix-run/node\";\r\n\r\nimport { api } from \"~/server/handlers.server\";\r\nimport Title from \"~/components/title\";\r\nimport { GetStorageValue, SetStorageValue, useDebounce } from \"~/utils/utils\";\r\nimport spotify from \"~/utils/spotify\";\r\nimport { getSessionData } from \"~/server/session.server\";\r\nimport HostRoom from \"~/components/hostRoom\";\r\nimport ClientRoom from \"~/components/clientRoom\";\r\nimport type { Party } from \"~/server/api.server\";\r\nimport type { OutletContext } from \"~/root\";\r\n\r\nexport type RoomData = {\r\n    title:          string\r\n    searchInput:    string\r\n    progressMS:     number\r\n    durationMS:     number\r\n    volume:         number\r\n    seekPos:        number\r\n    isPlaying:      boolean\r\n    clients:        Party['clients']\r\n    partyTracksQ:   Party['tracksQueue']\r\n    currentDevice:  Party['currentDevice']\r\n    devices:        Array<SpotifyApi.UserDevice>\r\n    searchResults:  Array<SpotifyApi.TrackObjectFull>\r\n    recentTracks:   Array<SpotifyApi.PlayHistoryObject>\r\n    tracksQueue:    Array<SpotifyApi.TrackObjectFull | SpotifyApi.EpisodeObjectFull>\r\n}\r\n\r\nexport type FetcherData = {\r\n    isPartyDeleted: boolean\r\n    clients:        Party['clients']\r\n    tracksQueue:    Party['tracksQueue']\r\n}\r\n\r\ntype LoaderData = {\r\n    isHost:         boolean\r\n    party:          Party,\r\n    errorMessage:   string\r\n    redirect:       string | undefined\r\n}\r\n\r\nexport const action: ActionFunction = async ({\r\n    request,\r\n    params\r\n}) => {\r\n    const username = await getSessionData(request, \"username\");\r\n    const formData = await request.formData();\r\n\tconst fetchType = formData.get(\"type\") as string;\r\n    const id = params.roomID;\r\n\r\n    if (!id || !username) {\r\n        return redirect('/');\r\n    }\r\n\r\n    switch (fetchType) {\r\n        case \"fetchData\":\r\n            const currentTrack = formData.get(\"currentTrack\") as string;\r\n            const party = api.GetParty(parseInt(id));\r\n\r\n            if (!party) {\r\n                return json<FetcherData>({\r\n                    tracksQueue: [],\r\n                    clients: [],\r\n                    isPartyDeleted: true\r\n                });\r\n            }\r\n\r\n            api.RemoveFromTracksQueue(parseInt(id), currentTrack);\r\n\r\n            return json<FetcherData>({\r\n                tracksQueue: party.tracksQueue,\r\n                clients: party.clients,\r\n                isPartyDeleted: false\r\n            });\r\n        case \"deleteRoom\":\r\n            api.DeleteParty(parseInt(id), username);\r\n            return redirect('/');\r\n        case \"leaveRoom\":\r\n            api.LeaveParty(parseInt(id), username);\r\n            return redirect('/');\r\n        case \"addToQueue\":\r\n            const trackId = formData.get(\"trackId\") as string;\r\n            const trackName = formData.get(\"trackName\") as string;\r\n\r\n            api.AddToTracksQueue(parseInt(id), username, trackId, trackName);\r\n            return null;\r\n        case \"kick\": {\r\n            const target = formData.get(\"username\") as string;\r\n\r\n            api.KickUser(parseInt(id), target);\r\n            return null;\r\n        }\r\n        case \"ban\": {\r\n            const target = formData.get(\"username\") as string;\r\n\r\n            api.BanUser(parseInt(id), target);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport const loader: LoaderFunction = async ({\r\n    request,\r\n    params\r\n}) => {\r\n    const id = params.roomID;\r\n\r\n    if (!id) {\r\n        return redirect('/');\r\n    }\r\n\r\n    const party = api.GetParty(parseInt(id));\r\n\r\n    if (!party) {\r\n        return json({ errorMessage: \"Error: Party not created or deleted\", redirect: \"/host\" });\r\n    }\r\n\r\n    const username = await getSessionData(request, \"username\");\r\n\r\n    if (!username) return redirect('/');\r\n\r\n    if (!party.clients.find(client => client.username == username)) {\r\n        return json({ errorMessage: `Error: You are not a member of the Party ${party.name} anymore`, redirect: \"/\" });\r\n    }\r\n\r\n    return json({\r\n        party,\r\n        isHost: party.clients.find(client => client.username == username)?.isHost\r\n    });\r\n}\r\n\r\nexport default function Room() {\r\n    const loaderData = useLoaderData<LoaderData>();\r\n    const context = useOutletContext<OutletContext>();\r\n    const fetcher = useFetcher<FetcherData>();\r\n    const navigate = useNavigate();\r\n    const [isAllowed, setIsAllowed] = useState(true);\r\n    const fetchDataTimeout = useRef<NodeJS.Timer | null>(null);\r\n    const [fetchInterval, setFetchInterval] = useState<NodeJS.Timer>();\r\n    const [syncInterval, setSyncInterval] = useState<NodeJS.Timer>();\r\n    const [{\r\n        title,\r\n        volume,\r\n        progressMS,\r\n        durationMS,\r\n        isPlaying,\r\n        recentTracks,\r\n        partyTracksQ,\r\n        searchInput,\r\n        searchResults,\r\n        clients,\r\n        currentDevice,\r\n        devices,\r\n        seekPos,\r\n        tracksQueue\r\n    }, setRoomData] = useReducer(\r\n        (oldState: RoomData, newState: Partial<RoomData>): RoomData => ({...oldState, ...newState}),\r\n        {\r\n            title: \"Loading...\",\r\n            volume: 99.9,\r\n            progressMS: 0,\r\n            durationMS: 0,\r\n            isPlaying: false,\r\n            recentTracks: [],\r\n            partyTracksQ: [],\r\n            searchInput: \"\",\r\n            searchResults: [],\r\n            clients: [],\r\n            currentDevice: null,\r\n            devices: [],\r\n            seekPos: 0,\r\n            tracksQueue: []\r\n        }\r\n    );\r\n\r\n    const debounceVolume: number = useDebounce(volume, 600);\r\n    const debounceSearch: string = useDebounce(searchInput, 600);\r\n    const debounceSeek: number = useDebounce(seekPos, 500);\r\n\r\n    const FetchData = useCallback((delay?: number) => {\r\n        if (fetchDataTimeout.current)\r\n            clearTimeout(fetchDataTimeout.current);\r\n\r\n        fetchDataTimeout.current = setTimeout(() => {\r\n            (async () => {\r\n                fetchDataTimeout.current = null;\r\n                const [playbackData, recentTracks, queueData] =\r\n                    await Promise.all([\r\n                        spotify.GetCurrentTrackData(),\r\n                        spotify.GetRecentlyPlayedTracks(5),\r\n                        spotify.GetCurrentQueueData()\r\n                    ]);\r\n        \r\n                if (playbackData instanceof Error) {\r\n                    toast.error(`Error: Failed to fetch current track (${playbackData.message})`, {\r\n                        position: \"bottom-right\",\r\n                        autoClose: 2500,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        theme: \"light\",\r\n                    });\r\n\r\n                    console.error(playbackData.message);\r\n\r\n                    return;\r\n                }\r\n        \r\n                if (recentTracks instanceof Error) {\r\n                    toast.error(`Error: Failed to fetch recent tracks (${recentTracks.message})`, {\r\n                        position: \"bottom-right\",\r\n                        autoClose: 2500,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        theme: \"light\",\r\n                    });\r\n\r\n                    console.error(recentTracks.message);\r\n\r\n                    return;\r\n                }\r\n        \r\n                if (queueData instanceof Error) {\r\n                    toast.error(`Error: Failed to fetch tracks in queue (${queueData.message})`, {\r\n                        position: \"bottom-right\",\r\n                        autoClose: 2500,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        theme: \"light\",\r\n                    });\r\n\r\n                    console.error(queueData.message);\r\n\r\n                    return;\r\n                }\r\n\r\n                if (!playbackData || !playbackData.device.is_active) {\r\n                    const devices = await spotify.GetDevices();\r\n\r\n                    if (!(devices instanceof Error)) {\r\n                        setRoomData({ currentDevice: null, devices });\r\n                    }\r\n                }\r\n\r\n                if (!playbackData) {\r\n                    return setRoomData({\r\n                        title: \"Play a music on Spotify to start using Sharify\"\r\n                    });\r\n                }\r\n\r\n                const currentTrack = playbackData.item;\r\n                const recentArr: Array<SpotifyApi.PlayHistoryObject> = [];\r\n                const queueArr: Array<SpotifyApi.TrackObjectFull | SpotifyApi.EpisodeObjectFull> = [];\r\n\r\n                recentTracks.forEach(track => {\r\n                    if (!(track instanceof Error)) {\r\n                        recentArr.push(track);\r\n                    }\r\n                })\r\n\r\n                queueData.queue.forEach((track, i) => {\r\n                    if (i >= 5) return;\r\n                    queueArr.push(track);\r\n                })\r\n        \r\n                if (!currentTrack) return console.error(\"Couldn't fetch current track\");\r\n        \r\n                if (currentTrack.type == \"episode\") return setRoomData({\r\n                    title: currentTrack.name,\r\n                    recentTracks: recentArr,\r\n                    tracksQueue: queueArr,\r\n                    durationMS: currentTrack.duration_ms,\r\n                });\r\n\r\n                return setRoomData({\r\n                    title: `${currentTrack.name} - ${currentTrack.artists.map(artist => artist.name).join(', ')}`,\r\n                    recentTracks: recentArr,\r\n                    tracksQueue: queueArr,\r\n                    durationMS: currentTrack.duration_ms,\r\n                    progressMS: playbackData.progress_ms || 0,\r\n                    isPlaying: playbackData.is_playing,\r\n                    volume: playbackData.device.volume_percent || 50\r\n                });\r\n            })()\r\n        }, delay || 500);\r\n    }, [fetchDataTimeout, setRoomData])\r\n\r\n\r\n    useEffect(() => {\r\n        if (!isAllowed) return;\r\n\r\n        const interval = setInterval(() => fetcher.submit({\r\n\t\t\ttype: \"fetchData\",\r\n\t\t\tusername: context.username,\r\n            currentTrack: title\r\n\t\t}, { method: \"post\" }), 1000);\r\n\r\n        setFetchInterval(interval);\r\n\r\n        const syncInterval = setInterval(() => FetchData(0), 10000);\r\n\r\n        setSyncInterval(syncInterval);\r\n\r\n        const timeout = setTimeout(() => FetchData(0), 1000);\r\n\r\n        return () => {\r\n            clearTimeout(timeout);\r\n            clearInterval(interval);\r\n            clearInterval(syncInterval);\r\n        }\r\n    }, [title])\r\n\r\n    useEffect(() => {\r\n        if (fetcher.data) {\r\n            if (fetcher.data.isPartyDeleted) {\r\n                const _toast = toast('The party has been deleted by the host!', {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 2500,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: \"light\",\r\n                });\r\n\r\n                const timeout = setTimeout(() => navigate('/'), 3000);\r\n\r\n                setIsAllowed(false);\r\n\r\n                return () => {\r\n                    if (toast.isActive(_toast)) toast.dismiss(_toast);\r\n                    clearTimeout(timeout);\r\n                }\r\n            }\r\n\r\n            if (!fetcher.data.clients.find(client => client.username == context.username)) {\r\n                clearInterval(fetchInterval);\r\n                clearInterval(syncInterval);\r\n\r\n                setIsAllowed(false);\r\n\r\n                const _toast = toast('You have been kicked of the room by the host!', {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 2500,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: \"light\",\r\n                });\r\n                const timeout = setTimeout(() => navigate('/client'), 3000);\r\n\r\n                return () => {\r\n                    if (toast.isActive(_toast)) toast.dismiss(_toast);\r\n                    clearTimeout(timeout);\r\n                }\r\n            }\r\n\r\n            setRoomData({\r\n                partyTracksQ: fetcher.data.tracksQueue,\r\n                clients: fetcher.data.clients\r\n            });\r\n        }\r\n    }, [fetcher.data])\r\n\r\n    useEffect(() => {\r\n        if (!isPlaying) return;\r\n\r\n        const timeout = setTimeout(() => {\r\n            if (durationMS > 0 && progressMS >= durationMS) {\r\n                clearTimeout(timeout);\r\n                FetchData();\r\n                return;\r\n            }\r\n\r\n            setRoomData({ progressMS: progressMS + 1000 });\r\n        }, 1000);\r\n\r\n        return () => clearTimeout(timeout);\r\n    }, [progressMS, durationMS, setRoomData, isPlaying, FetchData])\r\n\r\n    useEffect(() => {\r\n        if (debounceVolume == 99.9) return;  // dodge initializer\r\n\r\n        spotify.SetVolume(debounceVolume);\r\n    }, [debounceVolume])\r\n\r\n    useEffect(() => {\r\n        if (debounceSearch.trim() == \"\") return;  // dodge initializer\r\n\r\n        spotify\r\n            .SearchTracks(debounceSearch)\r\n            .then(resp => {\r\n                if (resp instanceof Error) return console.error(resp.message)\r\n\r\n                setRoomData({ searchResults: resp.tracks?.items })\r\n            })\r\n            .catch(console.error);\r\n    }, [debounceSearch])\r\n\r\n    useEffect(() => {\r\n        if (debounceSeek == 0) return;  // dodge initializer\r\n\r\n        spotify.Seek(debounceSeek);\r\n    }, [debounceSeek])\r\n\r\n    useEffect(() => {\r\n        if (loaderData.errorMessage) {\r\n            const _toast = toast.error(loaderData.errorMessage, {\r\n                position: \"bottom-right\",\r\n                autoClose: 2500,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: \"light\",\r\n            });\r\n\r\n            const timeout = setTimeout(() => navigate(loaderData.redirect || '/'), 3000);\r\n\r\n            setIsAllowed(false);\r\n    \r\n            return () => {\r\n                if (toast.isActive(_toast)) toast.dismiss(_toast);\r\n                clearTimeout(timeout);\r\n            }\r\n        }\r\n\r\n        SetStorageValue({\r\n            st: {\r\n                at: loaderData.party.spotifyCreds.accessToken,\r\n                rt: loaderData.party.spotifyCreds.refreshToken,\r\n                ein: loaderData.party.spotifyCreds.expiresIn,\r\n                date: loaderData.party.spotifyCreds.date\r\n            }\r\n        });\r\n\r\n        spotify.isOwner = loaderData.isHost;\r\n\r\n        if (currentDevice) return;\r\n\r\n        const spotifyDevice = GetStorageValue(\"SpotifyDevice\") as string;\r\n\r\n        if (spotifyDevice) {\r\n            const device = JSON.parse(spotifyDevice) as SpotifyApi.UserDevice;\r\n            setRoomData({ currentDevice: device });\r\n        } else if (spotify.currentDevice) {\r\n            setRoomData({ currentDevice: spotify.currentDevice });\r\n        } else {\r\n            (async () => {\r\n                const devices = await spotify.GetDevices();\r\n\r\n                if (devices instanceof Error) {\r\n                    toast.error(`Error: Failed to get devices (${devices.message})`, {\r\n                        position: \"bottom-right\",\r\n                        autoClose: 2500,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        theme: \"light\",\r\n                    });\r\n        \r\n                    return;\r\n                }\r\n\r\n                setRoomData({ currentDevice: spotify.currentDevice, devices });\r\n            })()\r\n        }\r\n    }, [loaderData, navigate])\r\n\r\n    const addTrackToQueue = (track: SpotifyApi.TrackObjectFull) => {\r\n        (async () => {\r\n            const res = await spotify.AddNextTrack(track.external_urls.spotify);\r\n\r\n            if (!(res instanceof Error)) {\r\n                toast(`Added track ${track.name} - ${track.artists.map(a => a.name).join(', ')} to queue !`, {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 3000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    theme: \"light\",\r\n                });\r\n            }\r\n    \r\n            fetcher.submit({\r\n                type: \"addToQueue\",\r\n                trackId: track.id,\r\n                trackName: `${track.name} - ${track.artists.map(artist => artist.name).join(', ')}`,\r\n            }, { method: \"post\" });\r\n\r\n            setRoomData({ searchResults: [] });\r\n        })()\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Title />\r\n            {isAllowed ?\r\n                loaderData.errorMessage ? null : (\r\n                    loaderData.isHost\r\n                        ? <HostRoom\r\n                            fetcher={fetcher}\r\n                            username={context.username}\r\n                            title={title}\r\n                            volume={volume}\r\n                            setRoomData={setRoomData}\r\n                            isPlaying={isPlaying}\r\n                            durationMS={durationMS}\r\n                            progressMS={progressMS}\r\n                            FetchData={FetchData}\r\n                            clients={clients}\r\n                            recentTracks={recentTracks}\r\n                            tracksQueue={tracksQueue}\r\n                            partyTracksQ={partyTracksQ}\r\n                            currentDevice={currentDevice}\r\n                            devices={devices}\r\n                            searchResults={searchResults}\r\n                            addTrackToQueue={addTrackToQueue}\r\n                        />\r\n                        : <ClientRoom\r\n                            username={context.username}\r\n                            title={title}\r\n                            isPlaying={isPlaying}\r\n                            durationMS={durationMS}\r\n                            progressMS={progressMS}\r\n                            FetchData={FetchData}\r\n                            recentTracks={recentTracks}\r\n                            tracksQueue={tracksQueue}\r\n                            partyTracksQ={partyTracksQ}\r\n                            setRoomData={setRoomData}\r\n                            searchResults={searchResults}\r\n                            addTrackToQueue={addTrackToQueue}\r\n                        />\r\n                )\r\n            : null}\r\n            <ToastContainer />\r\n        </>\r\n    );\r\n}\r\n\r\nexport const Icon = (props: {\r\n    classStr: string,\r\n    onClick?: React.MouseEventHandler<HTMLDivElement> | undefined,\r\n}) => {\r\n    const { classStr, onClick } = props;\r\n\r\n    return (\r\n        <div\r\n            className=\"flex text-center items-center justify-center cursor-pointer rounded-full hover:bg-main-color-hover/30 w-12 h-12\"\r\n            onClick={onClick}\r\n        >\r\n            <i className={`${classStr} text-2xl`}></i>\r\n        </div>\r\n    );\r\n}\r\n", "import { useState } from \"react\";\nimport { Form } from \"@remix-run/react\";\nimport type { FetcherWithComponents } from \"@remix-run/react\";\n\nimport { Icon } from \"~/routes/room.$roomID\";\nimport type { FetcherData, RoomData } from \"~/routes/room.$roomID\";\nimport spotify from \"~/utils/spotify\";\nimport { FormatTime, SetStorageValue } from \"~/utils/utils\";\nimport type { Party } from \"~/server/api.server\";\n\nexport default function HostRoom(props: {\n    fetcher: FetcherWithComponents<FetcherData>\n    username: string\n    title: string\n    volume: number\n    setRoomData: React.Dispatch<Partial<RoomData>>\n    isPlaying: boolean\n    durationMS: number\n    progressMS: number\n    FetchData: (delay?: number) => void\n    clients: Party['clients']\n    recentTracks: Array<SpotifyApi.PlayHistoryObject>\n    tracksQueue: Array<SpotifyApi.TrackObjectFull | SpotifyApi.EpisodeObjectFull>\n    partyTracksQ: Party['tracksQueue']\n    currentDevice: Party['currentDevice']\n    devices: Array<SpotifyApi.UserDevice>\n    searchResults: Array<SpotifyApi.TrackObjectFull>\n    addTrackToQueue: (track: SpotifyApi.TrackObjectFull) => void\n}) {\n    const {\n        fetcher,\n        username,\n        title,\n        volume,\n        setRoomData,\n        isPlaying,\n        durationMS,\n        progressMS,\n        FetchData,\n        clients,\n        recentTracks,\n        tracksQueue,\n        partyTracksQ,\n        currentDevice,\n        devices,\n        searchResults,\n        addTrackToQueue\n    } = props;\n    const [showVolume, setShowVolume] = useState(false);\n\n    const tracksQElements: Array<JSX.Element | null> = [];\n\n    tracksQueue.forEach((track, i) => {\n        const owner = partyTracksQ.find(trackOwner => trackOwner.trackId == track.id);\n\n        tracksQElements.push(track.type == \"episode\" ? null : (\n            <div key={i} className=\"text-lg\">\n                <span>{`[${i+1}]${owner ? ` (${owner.username})` : \"\"} ${track.name} - ${track.artists.map(a => a.name).join(', ')}`}</span>\n            </div>\n        ));\n    });\n\n    const handlePlay = () => {\n        spotify\n            .Resume()\n            .then(() => FetchData(250))\n            .catch(console.error);\n    }\n\n    const handlePause = () => {\n        spotify\n            .Pause()\n            .then(() => FetchData(250))\n            .catch(console.error);\n    }\n\n    const handleNext = () => {\n        spotify\n            .SkipToNext()\n            .then(() => FetchData(500))\n            .catch(console.error);\n    }\n\n    const handlePrevious = () => {\n        if ((durationMS - progressMS) < durationMS / 2) {\n            return spotify\n                .Seek(0)\n                .then(() => FetchData(500))\n                .catch(console.error);\n        }\n\n        spotify\n            .SkipToPrevious()\n            .then(() => FetchData(500))\n            .catch(console.error);\n    }\n\n    const handleSeek: React.ChangeEventHandler<HTMLInputElement> = e => {\n        setRoomData({ seekPos: parseInt(e.target.value) });\n        FetchData(1000);\n    }\n\n    const setSpotifyDevice = (device: SpotifyApi.UserDevice) => {\n        spotify.SetDevice(device);\n    \n        SetStorageValue({ SpotifyDevice: JSON.stringify(device) });\n    \n        fetcher.submit(\n            { type: \"setSpotifyDevice\", spotifyDevice: JSON.stringify(device) },\n            { method: 'post' }\n        );\n    }\n\n    return (\n        <>\n            <nav className=\"absolute top-0 right-10 w-2/6 h-28 z-10 flex flex-row items-center justify-end content-center\">\n                <Form method=\"post\">\n                    <input type=\"hidden\" name=\"username\" value={username} />\n                    <input type=\"hidden\" name=\"type\" value=\"deleteRoom\" />\n                    <button\n                        type=\"submit\"\n                        className=\"text-2xl rounded-3xl w-36 border-2 duration-300 border-main-color hover:border-red-700 hover:text-red-700 hover:border-4 hover:scale-105\"\n                    >\n                        {\"Delete Room\"}\n                    </button>\n                </Form>\n            </nav>\n            <section className=\"scrollsnap-page\">\n                <div className=\"flex flex-col items-center justify-center text-center w-10/12 m-auto my-28\">\n                    {!currentDevice ? (\n                        <div>\n                            <span className=\"text-2xl p-6\">Select a Device to use</span>\n                            {devices.map(device => (\n                                <button\n                                    key={device.name}\n                                    className=\"text-2xl form-input rounded-xl\"\n                                    onClick={() => setSpotifyDevice(device)}\n                                >\n                                    {`${device.name} (${device.is_active ? \"Active\" : \"Inactive\"})`}\n                                </button>\n                            ))}\n                        </div>\n                    ) : null}\n                    <span className=\"text-2xl p-6\">{title}</span>\n                    <div className=\"flex flex-col gap-5 mb-5\">\n                        <span>{FormatTime(progressMS, durationMS)}</span>\n                        <input\n                            type=\"range\"\n                            min={0}\n                            max={durationMS}\n                            defaultValue={progressMS}\n                            className=\"accent-indigo-700\"\n                            draggable={false}\n                            onChange={handleSeek}\n                        />\n                    </div>\n                    <div className=\"scrollsnap-start-component flex flex-row items-center justify-center gap-x-10 py-6 border-y-[1px] border-main-color-hover w-full\">\n                        <Icon classStr=\"fa-solid fa-backward-step\" onClick={handlePrevious} />\n                        {\n                            isPlaying\n                                ? <Icon classStr=\"fa-solid fa-pause\" onClick={handlePause} />\n                                : <Icon classStr=\"fa-solid fa-play\" onClick={handlePlay} />\n                        }\n                        <Icon classStr=\"fa-solid fa-forward-step\" onClick={handleNext} />\n                        {volume >= 50 ? (\n                            <Icon onClick={() => setShowVolume(v => !v)} classStr=\"fa-solid fa-volume-high\" />\n                        ) : null}\n                        {volume < 50 && volume > 0 ? (\n                            <Icon onClick={() => setShowVolume(v => !v)} classStr=\"fa-solid fa-volume-low\" />\n                            ) : null}\n                        {volume == 0 ? (\n                            <Icon onClick={() => setShowVolume(v => !v)} classStr=\"fa-solid fa-volume-xmark\" />\n                        ) : null}\n                        {showVolume ? (\n                            <div className=\"flex flex-col text-center items-center justify-center\">\n                                <span className=\"text-xl\">{volume} %</span>\n                                <input\n                                    type=\"range\"\n                                    min={0}\n                                    max={100}\n                                    value={volume}\n                                    className=\"accent-main-color\"\n                                    onChange={e => setRoomData({ volume: parseInt(e.currentTarget.value) })}\n                                />\n                            </div>\n                        ) : null}\n                    </div>\n                    <div className=\"scrollsnap-start-component flex flex-row w-full\">\n                        <div className=\"flex flex-col flex-wrap h-80 w-full\">\n                            <span className=\"text-2xl\">Party members:</span>\n                            {clients.map(client => (\n                                <div className=\"flex flex-row flex-wrap gap-3 justify-center items-center max-w-[50%]\" key={client.username}>\n                                    <span className={`input-form text-3xl ${client.isHost ? \"text-main-color\" : \"text-indigo-700\"}`}>\n                                        {client.username}\n                                    </span>\n                                    {!client.isHost ? (\n                                        <>\n                                            <Form method=\"post\">\n                                                <input type=\"hidden\" name=\"username\" value={client.username} />\n                                                <input type=\"hidden\" name=\"type\" value=\"kick\" />\n                                                <button type=\"submit\">Kick</button>\n                                            </Form>\n                                            <Form method=\"post\">\n                                                <input type=\"hidden\" name=\"username\" value={client.username} />\n                                                <input type=\"hidden\" name=\"type\" value=\"ban\" />\n                                                <button type=\"submit\">Ban</button>\n                                            </Form>\n                                        </>\n                                    ) : null}\n                                </div>\n                            ))}\n                        </div>\n                        <div className=\"flex flex-row justify-center items-center content-center text-center w-full gap-5 pb-5\">\n                            <div className=\"w-full flex flex-col gap-2\">\n                                <span className=\"text-2xl\">Coming next:</span>\n                                {tracksQElements.map(el => el)}\n                            </div>\n                            <div className=\"w-full flex flex-col gap-2\">\n                                <span className=\"text-2xl\">Previously played:</span>\n                                {recentTracks.map((trackData, i) => (\n                                    <div key={i} className=\"text-lg\">\n                                        <span>\n                                            {`[${i+1}] ${trackData.track.name} - ${trackData.track.artists.map(a => a.name).join(', ')}`}\n                                        </span>\n                                    </div>\n                                ))}\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"scrollsnap-end-component flex flex-col items-center justify-center content-center gap-2 border-t-[1px] border-main-color-hover w-full h-56\">\n                        <span className=\"text-2xl\">Search a song to add to the queue:</span>\n                        <input\n                            className=\"rounded-lg outline-none\"\n                            type=\"text\"\n                            name=\"searchBar\"\n                            onChange={e => setRoomData({ searchInput: e.target.value })}\n                        />\n                        <div className=\"flex flex-row flex-wrap gap-5 justify-center overflow-y-scroll\">\n                            {searchResults.map(track => (\n                                <button\n                                    key={track.id}\n                                    className=\"border-[1px] border-[white] rounded-xl text-lg p-1 mt-4 hover:scale-105\"\n                                    onClick={() => addTrackToQueue(track)}\n                                >\n                                    {`${track.name} - ${track.artists.map(a => a.name).join(', ')}`}\n                                </button>\n                            ))}\n                        </div>\n                    </div>\n                </div>\n            </section>\n        </>\n    );\n}\n", "import { Form } from \"@remix-run/react\";\n\nimport { FormatTime } from \"~/utils/utils\";\nimport type { RoomData } from \"~/routes/room.$roomID\";\nimport type { Party } from \"~/server/api.server\";\n\nexport default function ClientRoom(props: {\n    username: string\n    title: string\n    isPlaying: boolean\n    durationMS: number\n    progressMS: number\n    FetchData: () => void\n    recentTracks: Array<SpotifyApi.PlayHistoryObject>\n    tracksQueue: Array<SpotifyApi.TrackObjectFull | SpotifyApi.EpisodeObjectFull>\n    partyTracksQ: Party['tracksQueue']\n    setRoomData: React.Dispatch<Partial<RoomData>>\n    searchResults: Array<SpotifyApi.TrackObjectFull>\n    addTrackToQueue: (track: SpotifyApi.TrackObjectFull) => void\n}) {\n    const {\n        username,\n        title,\n        durationMS,\n        progressMS,\n        recentTracks,\n        tracksQueue,\n        partyTracksQ,\n        setRoomData,\n        searchResults,\n        addTrackToQueue\n    } = props;\n\n    const tracksQElements: Array<JSX.Element | null> = [];\n\n    tracksQueue.forEach((track, i) => {\n        const owner = partyTracksQ.find(trackOwner => trackOwner.trackId == track.id);\n\n        tracksQElements.push(track.type == \"episode\" ? null : (\n            <div key={i} className=\"text-lg\">\n                <span>{`[${i+1}]${owner ? ` (${owner.username})` : \"\"} ${track.name} - ${track.artists.map(a => a.name).join(', ')}`}</span>\n            </div>\n        ));\n    });\n\n    return (\n        <>\n            <nav className=\"absolute top-0 right-10 w-2/6 h-28 z-10 flex flex-row items-center justify-end content-center\">\n                <Form method=\"post\">\n                    <input type=\"hidden\" name=\"username\" value={username} />\n                    <input type=\"hidden\" name=\"type\" value=\"leaveRoom\" />\n                    <button\n                        type=\"submit\"\n                        className=\"text-2xl rounded-3xl w-36 border-2 duration-300 border-main-color hover:border-red-700 hover:text-red-700 hover:border-4 hover:scale-105\"\n                    >\n                        {\"Leave Room\"}\n                    </button>\n                </Form>\n            </nav>\n            <section className=\"scrollsnap-page\">\n                <div className=\"flex flex-col items-center justify-center text-center w-10/12 m-auto my-28\">\n                    <span className=\"text-2xl p-6\">{title}</span>\n                    <div className=\"flex flex-col gap-5 mb-5\">\n                        <span>{FormatTime(progressMS, durationMS)}</span>\n                        <input\n                            type=\"range\"\n                            min={0}\n                            max={durationMS}\n                            defaultValue={progressMS}\n                            className=\"accent-indigo-700\"\n                            draggable={false}\n                            onChange={e => e.target.value = String(progressMS)}\n                        />\n                    </div>\n                    <div className=\"scrollsnap-end-component flex flex-row items-center justify-center gap-x-10 py-6 border-t-[1px] border-main-color-hover w-full\">\n                        <div className=\"flex flex-col items-center justify-center content-center gap-2 w-full h-56 overflow-x-hidden\">\n                            <span className=\"text-2xl\">Search a song to add to the queue:</span>\n                            <input\n                                className=\"rounded-lg outline-none\"\n                                type=\"text\"\n                                name=\"searchBar\"\n                                onChange={e => setRoomData({ searchInput: e.target.value })}\n                            />\n                            <div className=\"flex flex-row flex-wrap gap-2 justify-center overflow-y-scroll\">\n                                {searchResults.map(track => (\n                                    <button\n                                        key={track.id}\n                                        className=\"border-[1px] border-[white] rounded-xl text-lg p-1 m-4 hover:scale-105\"\n                                        onClick={() => addTrackToQueue(track)}\n                                    >\n                                        {`${track.name} - ${track.artists.map(a => a.name).join(', ')}`}\n                                    </button>\n                                ))}\n                            </div>\n                        </div>\n                        <div className=\"flex flex-row justify-center items-center content-center text-center w-full gap-5 pb-5\">\n                            <div className=\"w-full flex flex-col gap-2\">\n                                <span className=\"text-2xl\">Coming next:</span>\n                                {tracksQElements.map(el => el)}\n                            </div>\n                            <div className=\"w-full flex flex-col gap-2\">\n                                <span className=\"text-2xl\">Previously played:</span>\n                                {recentTracks.map((trackData, i) => (\n                                    <div key={i} className=\"text-lg\">\n                                        <span>\n                                            {`[${i+1}] ${trackData.track.name} - ${trackData.track.artists.map(a => a.name).join(', ')}`}\n                                        </span>\n                                    </div>\n                                ))}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        </>\n    );\n}\n"],
  "mappings": "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",
  "names": ["import_react", "import_jsx_dev_runtime", "import_jsx_dev_runtime", "recentTracks", "devices", "syncInterval"]
}
