{
  "version": 3,
  "sources": ["../../../app/routes/client.tsx"],
  "sourcesContent": ["import { toast, ToastContainer } from \"react-toastify\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { json, redirect } from \"@remix-run/node\";\r\nimport type { LoaderFunction, ActionFunction } from \"@remix-run/node\";\r\nimport { Form, useActionData, useLoaderData, useOutletContext, useSubmit } from \"@remix-run/react\";\r\n\r\nimport Title from \"~/components/title\";\r\nimport type { Party } from \"~/server/api.server\";\r\nimport { api } from \"~/server/handlers.server\";\r\nimport Spotify from \"~/app/utils/spotify\";\r\nimport { getSessionData, setSessionData, unsetSessionData } from \"~/server/session.server\";\r\nimport type { OutletContext } from \"~/root\";\r\n\r\ntype ActionData = {\r\n    errorMessage: string\r\n}\r\n\r\ntype LoaderData = {\r\n    parties: Array<Party>\r\n}\r\n\r\nexport const action: ActionFunction = async ({\r\n    request\r\n}) => {\r\n    const formData = await request.formData();\r\n\tconst deleteSTokens = formData.get('DeleteSpotifyTokens') as string || false;\r\n\r\n\tif (deleteSTokens) {\r\n\t\tawait unsetSessionData(request, \"SpotifyTokens\", \"/\");\r\n\t}\r\n\r\n    const username = formData.get(\"username\") as string;\r\n    const partyID = formData.get(\"partyID\") as string;\r\n    const password = formData.get(\"partyPwd\") as string;\r\n\r\n    if (!partyID) {\r\n        throw new Error(\"Party ID not found, please contact Snoupix\");\r\n    }\r\n\r\n    const party = api.GetParty(parseInt(partyID));\r\n\r\n    if (!username) {\r\n        throw new Error(\"Username not found, please contact Snoupix\");\r\n    }\r\n\r\n    if (!party) {\r\n        return json({ errorMessage: `Party id ${partyID} doesn't exist anymore.` });\r\n    }\r\n\r\n    if (party.isPrivate && party.password != password) {\r\n        return json({ errorMessage: `Error: Party password incorrect` });\r\n    }\r\n\r\n    if (api.UsernameExists(username)) {\r\n        return json({ errorMessage: `Error: There is already a Sharify member called \"${username}\"` });\r\n    }\r\n\r\n    const error = api.JoinParty(parseInt(partyID), username);\r\n\r\n    if (error) {\r\n        return json({ errorMessage: error.message });\r\n    }\r\n    \r\n    return await setSessionData(request, \"username\", username, `/room/${partyID}`);\r\n}\r\n\r\nexport const loader: LoaderFunction = async ({\r\n    request\r\n}) => {\r\n    const username = await getSessionData(request, \"username\");\r\n\r\n\tif (username) {\r\n        const party = api.GetUserParty(username);\r\n    \r\n        if (party != null) {\r\n            return redirect(`/room/${party.id}`);\r\n        }\r\n\t}\r\n\r\n    const parties = api.GetParties(false);\r\n\r\n    return json({ parties });\r\n}\r\n\r\nexport default function Client() {\r\n    const loaderData = useLoaderData<LoaderData>();\r\n    const actionData = useActionData<ActionData>();\r\n    const context = useOutletContext<OutletContext>();\r\n    const submit = useSubmit();\r\n    const [parties, setParties] = useState<Array<Party>>([]);\r\n    const [showUP, setShowUP] = useState(false); // username popup\r\n    const [showPP, setShowPP] = useState(false); // password popup\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [partyData, setPartyData] = useState<{\r\n        id: number\r\n        isPrivate: boolean\r\n    } | null>(null);\r\n\r\n    useEffect(() => {\r\n        if (loaderData.parties) {\r\n            setParties(loaderData.parties.filter(\r\n                party => !party.bannedClients.includes(context.username)\r\n            ));\r\n        }\r\n\r\n        if (Spotify.isReady && !Spotify.isOwner) {\r\n            submit({ DeleteSpotifyTokens: \"true\" }, { method: \"post\" });\r\n        }\r\n\r\n        setUsername(context.username);\r\n    }, [loaderData])\r\n\r\n    useEffect(() => {\r\n        if (actionData && actionData.errorMessage) {\r\n            const _toast = toast.error(actionData.errorMessage, {\r\n                position: \"bottom-right\",\r\n                autoClose: 2500,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                theme: \"dark\",\r\n            });\r\n\r\n            setUsername(\"\");\r\n            setPassword(\"\");\r\n    \r\n            return () => toast.isActive(_toast) ? toast.dismiss(_toast) : undefined;\r\n        }\r\n    }, [actionData])\r\n\r\n    useEffect(() => {\r\n        if (\r\n            !showUP && !showPP && partyData != null &&\r\n            (username.trim() != \"\" || password != \"\")\r\n        ) {\r\n            handleJoin(partyData.id, partyData.isPrivate);\r\n        }\r\n    }, [showUP, showPP])\r\n\r\n    const handleJoin = (id: number, isPrivate: boolean) => {\r\n        setPartyData({ id, isPrivate });\r\n\r\n        if (!username || username.trim() == \"\") {\r\n            setShowUP(true);\r\n            return\r\n        }\r\n\r\n        if (isPrivate && password == \"\") {\r\n            setShowPP(true);\r\n            return\r\n        }\r\n\r\n        submit(\r\n            {\r\n                username,\r\n                partyID: String(id),\r\n                partyPwd: password\r\n            },\r\n            { method: \"post\" }\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Title />\r\n            <section className=\"h-screen\">\r\n                <div data-cy=\"div-rooms-array\" className=\"relative m-auto mt-28 w-3/5 h-3/5 flex flex-col overflow-y-scroll border-[1px] border-main-color-hover rounded-lg shadow-around\">\r\n                    {parties && parties.length > 0 ? parties.map(party => (\r\n                        <Form\r\n                            data-cy=\"client-form-room\"\r\n                            onClick={() => handleJoin(party.id, party.isPrivate)}\r\n                            key={party.id}\r\n                            className={\"cursor-pointer flex flex-row justify-center text-2xl py-4 border-b-[1px] duration-300 hover:text-slate-400\" + (\r\n                                party.id % 2 == 0 ? \" text-indigo-600\" : \"\"\r\n                            )}\r\n                        >\r\n                            {`[${party.id}] ${party.name} | ${party.clients.length}/${party.MAX_CLIENTS} | `}\r\n                            {party.type == \"Spotify\" ? <i className=\"fab fa-spotify pl-2.5 pr-1 mt-1 text-[currentColor]\"></i> : <i className=\"fab fa-youtube pl-2.5 pr-1 mt-1 text-[currentColor]\"></i>}\r\n                            {party.isPrivate ? ' | ' : ''}\r\n                            {party.isPrivate ? <i className=\"fas fa-lock pl-2.5 mt-[.15rem] text-[currentColor]\"></i> : ''}\r\n                        </Form>\r\n                    )) : null}\r\n                    {loaderData && loaderData.parties && loaderData.parties.length == 0 ? (\r\n                        <span className=\"text-center text-3xl m-auto\">No parties found</span>\r\n                    ) : null}\r\n                    <PasswordPopup\r\n                        display={showPP}\r\n                        setDisplay={setShowPP}\r\n                        setPassword={setPassword}\r\n                    />\r\n                    <UsernamePopup\r\n                        display={showUP}\r\n                        setDisplay={setShowUP}\r\n                        username={username}\r\n                        setUsername={setUsername}\r\n                    />\r\n                </div>\r\n            </section>\r\n            <ToastContainer />\r\n        </>\r\n    );\r\n}\r\n\r\nconst UsernamePopup = (\r\n    props: {\r\n        display: boolean\r\n        setDisplay: React.Dispatch<React.SetStateAction<boolean>>\r\n        username: string\r\n        setUsername: React.Dispatch<React.SetStateAction<string>>\r\n    }\r\n) => {\r\n    const { display, setDisplay, username, setUsername } = props;\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n    if (display) {\r\n        setTimeout(() => inputRef.current?.focus(), 500);\r\n    }\r\n\r\n    return (\r\n        <div className={`absolute top-0 left-0 h-full w-[100%] flex-col justify-center items-center gap-5 backdrop-blur-sm duration-300 ${display ? \"flex\" : \"hidden\"}`}>\r\n            <span className=\"text-center text-3xl\">First of all, you need to register your username</span>\r\n            <input\r\n                data-cy=\"client-username\"\r\n                ref={inputRef}\r\n                type=\"text\"\r\n                className=\"form-input\"\r\n                placeholder=\"Username\"\r\n                defaultValue={username}\r\n                onChange={e => setUsername(e.target.value)}\r\n            />\r\n            <button data-cy=\"client-username-submit\" className=\"text-2xl\" onClick={() => setDisplay(false)}>Close</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst PasswordPopup = (\r\n    props: {\r\n        display: boolean\r\n        setDisplay: React.Dispatch<React.SetStateAction<boolean>>\r\n        setPassword: React.Dispatch<React.SetStateAction<string>>\r\n    }\r\n) => {\r\n    const { display, setDisplay, setPassword } = props;\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n    if (display) {\r\n        setTimeout(() => inputRef.current?.focus(), 500);\r\n    }\r\n\r\n    return (\r\n        <div className={`absolute top-0 left-0 h-full w-[100%] flex-col justify-center items-center gap-5 backdrop-blur-sm duration-300 ${display ? \"flex\" : \"hidden\"}`}>\r\n            <span className=\"text-center text-3xl\">Type the correct Party password</span>\r\n            <input\r\n                data-cy=\"client-party-password\"\r\n                ref={inputRef}\r\n                type=\"password\"\r\n                className=\"form-input w-full\"\r\n                placeholder=\"Party password\"\r\n                onChange={e => setPassword(e.currentTarget.value)}\r\n            />\r\n            <button data-cy=\"client-party-password-submit\" className=\"text-2xl\" onClick={() => setDisplay(false)}>Close</button>\r\n        </div>\r\n    );\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
