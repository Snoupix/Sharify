{
  "version": 3,
  "sources": ["../../../app/routes/auth_spotify.tsx"],
  "sourcesContent": ["import { json } from \"@remix-run/node\";\r\nimport type { ActionFunction, LoaderFunction } from \"@remix-run/node\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Link, useLoaderData, useSubmit } from \"@remix-run/react\";\r\n\r\nimport Title from \"~/components/title\";\r\nimport { getSessionData, setSessionData } from \"~/server/session.server\";\r\n\r\nimport Spotify from \"~/utils/spotify\";\r\n\r\ntype LoaderData = {\r\n    SpotifyTokens: {\r\n        sat: string\r\n        srt: string\r\n        ein: number\r\n        date: number\r\n    }\r\n}\r\n\r\nexport const action: ActionFunction = async ({\r\n    request\r\n}) => {\r\n    const formData = await request.formData();\r\n    const sTokens = formData.get(\"spotifyTokens\") as string;\r\n\r\n    return await setSessionData(request, \"SpotifyTokens\", sTokens, \"/host\");\r\n}\r\n\r\nexport const loader: LoaderFunction = async ({\r\n    request\r\n}) => {\r\n    const SpotifyTokens = await getSessionData(request, \"SpotifyTokens\");\r\n\r\n    if (SpotifyTokens) {\r\n        return json({ SpotifyTokens: JSON.parse(SpotifyTokens) });\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport default function Auth_Spotify() {\r\n    const loaderData = useLoaderData<LoaderData>();\r\n    const submit = useSubmit();\r\n\tconst [text, setText] = useState(\"\");\r\n    const [fetched, setFetched] = useState(false);\r\n    const [isReady, setIsReady] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            if (Spotify.isReady) {\r\n                setIsReady(true);\r\n                clearInterval(interval);\r\n            }\r\n        }, 5000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (fetched) return;\r\n\r\n        const params = new URLSearchParams(location.search);\r\n        const code = params.get(\"code\");\r\n        const error = params.get(\"error\");\r\n\r\n        if (code) {\r\n            setFetched(true);\r\n            return Spotify.FetchAccessToken(code);\r\n        }\r\n\r\n        if (error) {\r\n            setFetched(true);\r\n            return setText(`Error: ${error}`);\r\n        }\r\n\r\n        if (loaderData && loaderData.SpotifyTokens) {\r\n            const expires_in = (\r\n                loaderData.SpotifyTokens.ein > 0 && loaderData.SpotifyTokens.ein <= 3600\r\n                    ? loaderData.SpotifyTokens.ein\r\n                    : 3600\r\n            ) * 1000;\r\n            const msDiff = (loaderData.SpotifyTokens.date + expires_in) - Date.now();\r\n\r\n            if (msDiff > 0) {\r\n                setFetched(true);\r\n                return Spotify.ProcessTokens({\r\n                    access_token: loaderData.SpotifyTokens.sat,\r\n                    refresh_token: loaderData.SpotifyTokens.srt,\r\n                    expires_in: loaderData.SpotifyTokens.ein,\r\n                    createdAt: loaderData.SpotifyTokens.date\r\n                });\r\n            }\r\n        }\r\n\r\n        location.replace(Spotify.GetAuthLink());\r\n    }, [loaderData, fetched])\r\n\r\n    useEffect(() => {\r\n        if (isReady) {\r\n            (async () => {\r\n                setFetched(true);\r\n\r\n                const profile = await Spotify.GetProfile();\r\n\r\n                if (!(profile instanceof Error)) {\r\n                    setText(`Successfully connected to ${profile.display_name}`);\r\n                }\r\n                \r\n                const tokens = Spotify.GetTokens();\r\n    \r\n                setTimeout(() => {\r\n                    submit(\r\n                        {\r\n                            spotifyTokens: JSON.stringify({\r\n                                sat: tokens.accessToken,\r\n                                srt: tokens.refreshToken,\r\n                                ein: tokens.expires_in,\r\n                                date: tokens.date,\r\n                            })\r\n                        },\r\n                        { method: 'post' }\r\n                    );\r\n                }, 1000);\r\n            })()\r\n        }\r\n    }, [isReady, submit])\r\n\r\n    return (\r\n        <div className=\"flex flex-col items-center justify-center content-center h-screen text-main-color font-semibold\">\r\n            <Title />\r\n            {\r\n                text != \"\" ?\r\n                <Link to=\"/host\" className=\"text-4xl\" data-cy=\"auth-text\">{text}</Link> :\r\n                <div className=\"loader\"></div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAEA,mBAAoC;AAIpC,qBAA+C;AA2HnC;AAzFG,SAAR,eAAgC;AACnC,QAAM,aAAa,cAA0B;AAC7C,QAAM,SAAS,UAAU;AAC5B,QAAM,CAAC,MAAM,OAAO,QAAI,uBAAS,EAAE;AAChC,QAAM,CAAC,SAAS,UAAU,QAAI,uBAAS,KAAK;AAC5C,QAAM,CAAC,SAAS,UAAU,QAAI,uBAAS,KAAK;AAE5C,8BAAU,MAAM;AACZ,UAAM,WAAW,YAAY,MAAM;AAC/B,UAAI,eAAQ,SAAS;AACjB,mBAAW,IAAI;AACf,sBAAc,QAAQ;AAAA,MAC1B;AAAA,IACJ,GAAG,GAAI;AAEP,WAAO,MAAM,cAAc,QAAQ;AAAA,EACvC,GAAG,CAAC,CAAC;AAEL,8BAAU,MAAM;AACZ,QAAI;AAAS;AAEb,UAAM,SAAS,IAAI,gBAAgB,SAAS,MAAM;AAClD,UAAM,OAAO,OAAO,IAAI,MAAM;AAC9B,UAAM,QAAQ,OAAO,IAAI,OAAO;AAEhC,QAAI,MAAM;AACN,iBAAW,IAAI;AACf,aAAO,eAAQ,iBAAiB,IAAI;AAAA,IACxC;AAEA,QAAI,OAAO;AACP,iBAAW,IAAI;AACf,aAAO,QAAQ,UAAU,OAAO;AAAA,IACpC;AAEA,QAAI,cAAc,WAAW,eAAe;AACxC,YAAM,cACF,WAAW,cAAc,MAAM,KAAK,WAAW,cAAc,OAAO,OAC9D,WAAW,cAAc,MACzB,QACN;AACJ,YAAM,SAAU,WAAW,cAAc,OAAO,aAAc,KAAK,IAAI;AAEvE,UAAI,SAAS,GAAG;AACZ,mBAAW,IAAI;AACf,eAAO,eAAQ,cAAc;AAAA,UACzB,cAAc,WAAW,cAAc;AAAA,UACvC,eAAe,WAAW,cAAc;AAAA,UACxC,YAAY,WAAW,cAAc;AAAA,UACrC,WAAW,WAAW,cAAc;AAAA,QACxC,CAAC;AAAA,MACL;AAAA,IACJ;AAEA,aAAS,QAAQ,eAAQ,YAAY,CAAC;AAAA,EAC1C,GAAG,CAAC,YAAY,OAAO,CAAC;AAExB,8BAAU,MAAM;AACZ,QAAI,SAAS;AACT,OAAC,YAAY;AACT,mBAAW,IAAI;AAEf,cAAM,UAAU,MAAM,eAAQ,WAAW;AAEzC,YAAI,EAAE,mBAAmB,QAAQ;AAC7B,kBAAQ,6BAA6B,QAAQ,cAAc;AAAA,QAC/D;AAEA,cAAM,SAAS,eAAQ,UAAU;AAEjC,mBAAW,MAAM;AACb;AAAA,YACI;AAAA,cACI,eAAe,KAAK,UAAU;AAAA,gBAC1B,KAAK,OAAO;AAAA,gBACZ,KAAK,OAAO;AAAA,gBACZ,KAAK,OAAO;AAAA,gBACZ,MAAM,OAAO;AAAA,cACjB,CAAC;AAAA,YACL;AAAA,YACA,EAAE,QAAQ,OAAO;AAAA,UACrB;AAAA,QACJ,GAAG,GAAI;AAAA,MACX,GAAG;AAAA,IACP;AAAA,EACJ,GAAG,CAAC,SAAS,MAAM,CAAC;AAEpB,SACI,mDAAC,SAAI,WAAU,mGACX;AAAA,uDAAC,WAAD;AAAA;AAAA;AAAA;AAAA,WAAO;AAAA,IAEH,QAAQ,KACR,mDAAC,QAAK,IAAG,SAAQ,WAAU,YAAW,WAAQ,aAAa,kBAA3D;AAAA;AAAA;AAAA;AAAA,WAAgE,IAChE,mDAAC,SAAI,WAAU,YAAf;AAAA;AAAA;AAAA;AAAA,WAAwB;AAAA,OALhC;AAAA;AAAA;AAAA;AAAA,SAOA;AAER;",
  "names": []
}
