{
  "version": 3,
  "sources": ["<stdin>", "../app/entry.server.tsx", "../app/root.tsx", "../app/utils/spotify.ts", "../app/utils/utils.tsx", "../app/server/session.server.ts", "../app/server/api.server.ts", "../app/server/handlers.server.ts", "../app/routes/auth_spotify.tsx", "../app/components/title.tsx", "../app/routes/room.$roomID.tsx", "../app/components/hostRoom.tsx", "../app/components/clientRoom.tsx", "../app/routes/client.tsx", "../app/routes/index.tsx", "../app/routes/host.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "import { PassThrough } from \"stream\";\nimport type { EntryContext } from \"@remix-run/node\";\nimport { Response } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport isbot from \"isbot\";\nimport { renderToPipeableStream } from \"react-dom/server\";\n\nconst ABORT_DELAY = 5000;\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return isbot(request.headers.get(\"user-agent\"))\n    ? handleBotRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      )\n    : handleBrowserRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      );\n}\n\nfunction handleBotRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    let didError = false;\n\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer context={remixContext} url={request.url} />,\n      {\n        onAllReady() {\n          const body = new PassThrough();\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(body, {\n              headers: responseHeaders,\n              status: didError ? 500 : responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          didError = true;\n\n          console.error(error);\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n\nfunction handleBrowserRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    let didError = false;\n\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer context={remixContext} url={request.url} />,\n      {\n        onShellReady() {\n          const body = new PassThrough();\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(body, {\n              headers: responseHeaders,\n              status: didError ? 500 : responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(err: unknown) {\n          reject(err);\n        },\n        onError(error: unknown) {\n          didError = true;\n\n          console.error(error);\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n", "import { useEffect, useMemo, useState } from \"react\";\nimport { w3cwebsocket as WsClient } from \"websocket\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport type {\n  LinksFunction,\n  ActionFunction,\n  LoaderFunction } from\n\"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { metaV1 } from \"@remix-run/v1-meta\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport {\n  isRouteErrorResponse,\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  useFetcher,\n  useLoaderData,\n  useLocation,\n  useRouteError } from\n\"@remix-run/react\";\n\nimport styles from \"~/compiled.css\";\nimport toastify from \"react-toastify/dist/ReactToastify.min.css\";\nimport Spotify from \"./utils/spotify\";\nimport { getSessionData } from \"./server/session.server\";\nimport { api } from \"./server/handlers.server\";\nimport type { Party } from \"./server/api.server\";\n\nexport type OutletContext = {\n  username: string;\n  toast: typeof toast;\n  spotify: Spotify | null;\n  party_data: Party | null;\n  websocket_connected: boolean;\n};\n\ntype LoaderData = {\n  id: string;\n  username: string;\n};\n\nexport const links: LinksFunction = () => {\n  return [\n  {\n    rel: \"stylesheet\",\n    href: \"https://fonts.googleapis.com/css2?family=Kaushan+Script&family=Montserrat:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap\"\n  },\n  {\n    rel: \"stylesheet\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css\"\n  },\n  {\n    rel: \"stylesheet\",\n    href: toastify\n  },\n  {\n    rel: \"stylesheet\",\n    href: styles\n  }];\n\n};\n\nexport const meta = (args: any) => metaV1(args, {\n  charset: \"utf-8\",\n  title: \"Sharify\",\n  viewport: \"width=device-width,initial-scale=1\",\n  keywords: \"Sharify, Snoupix, Samuel Dewaele, Spotify, Share, Music, Party\"\n});\n\nexport const action: ActionFunction = async ({ request }) => {\n  const username = await getSessionData(request, \"username\");\n\n  if (username) {\n    api.RemoveFromParty(username);\n  }\n\n  return null;\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const username = (await getSessionData(request, \"username\") as string);\n\n  return json<LoaderData>({\n    id: (process.env.SPOTIFY_CLIENT_ID as string),\n    username\n  });\n};\n\nfunction Document({\n  children\n\n\n}: {children: React.ReactNode;}) {\n  return (\n    <html lang=\"en\">\n\t\t\t<head>\n\t\t\t\t<Meta />\n\t\t\t\t<title>Sharify</title>\n\t\t\t\t<Links />\n\t\t\t</head>\n\t\t\t<body className=\"bg-bg-color overflow-x-hidden\">\n\t\t\t\t{children}\n\t\t\t\t<ScrollRestoration />\n\t\t\t\t<Scripts />\n\t\t\t\t<LiveReload />\n\t\t\t</body>\n\t\t</html>);\n\n}\n\nexport default function App() {\n  const loaderData = useLoaderData<LoaderData>();\n  const fetcher = useFetcher();\n  const { pathname } = useLocation();\n  const [contextData, setContextData] = useState<OutletContext>({\n    toast,\n    username: loaderData.username || \"\",\n    spotify: null,\n    party_data: null,\n    websocket_connected: false\n  });\n  const [serverInterval, setServerInterval] = useState<NodeJS.Timeout | null>(null);\n  const [isServerUp, setIsServerUp] = useState(false);\n\n  useEffect(() => {\n    // initWS(); // if you're in a room\n\n    if (!loaderData.id || !!contextData.spotify) return;\n\n    console.log(\"init spotify\");\n    setContextData((data) => ({ ...data, spotify: new Spotify(loaderData.id) }));\n  }, [loaderData, contextData.spotify]);\n\n  const initWS = () => {\n    const ws = new WsClient(`ws://127.0.0.1:3100/sharify_ws/1`);\n\n    ws.onmessage = (message) => {\n      try {\n        const data = JSON.parse(message.data.toString());\n        console.log(data);\n        contextData.party_data = data;\n      } catch (_) {\n        console.log(\"websocket message (not JSON):\", message);\n      }\n    };\n\n    ws.onopen = () => {\n      console.log(\"connected\");\n      contextData.websocket_connected = true;\n    };\n\n    ws.onclose = () => {\n      console.log(\"disconnected\");\n      contextData.websocket_connected = false;\n    };\n\n    ws.onerror = (error) => {\n      console.error(\"websocket error:\", error);\n    };\n  };\n\n  useEffect(() => {\n    if (serverInterval) {\n      clearInterval(serverInterval);\n    }\n\n    console.log(\"init interval\");\n    setServerInterval(setInterval(async () => {\n      try {\n        // console.log(Spotify.BACK_API.split(\"/\").slice(0, 3).join(\"/\"));\n        if ((await fetch(Spotify.BACK_API.split(\"/\").slice(0, 3).join(\"/\"))).status == 200) {\n          console.log(\"good\", serverInterval);\n          setIsServerUp(true);\n          x();\n          initWS();\n        }\n      } catch (error) {\n        console.error(\"server not reachable\", error);\n      }\n    }, 5000));\n\n    return () => {\n      fetcher.submit(null, { method: 'post' });\n\n      if (serverInterval) {\n        clearInterval(serverInterval);\n      }\n    };\n  }, []);\n\n  function x() {\n    clearInterval(serverInterval!);\n    setTimeout(() => setServerInterval(null), 5000);\n  }\n\n  if (!isServerUp) {\n    return (\n      <Document>\n                <div className=\"error-container\">\n                    <h1>Server is unreachable/loading...</h1>\n                </div>\n            </Document>);\n\n  }\n\n  return (\n    <Document>\n\t\t\t<AnimatePresence mode=\"wait\" initial={false}>\n\t\t\t\t<motion.main\n          className=\"relative min-h-screen w-screen\"\n          key={pathname}\n          initial={{ translateY: '2.5%' }}\n          animate={{ translateY: '0%' }}\n          exit={{ translateY: '2.5%' }}\n          transition={{ duration: .2 }}>\n\n\t\t\t\t\t<Outlet context={contextData} />\n\t\t\t\t\t<ToastContainer />\n\t\t\t\t</motion.main>\n\t\t\t</AnimatePresence>\n\t\t</Document>);\n\n}\n\nexport function ErrorBoundary() {\n  const error = useRouteError();\n\n  if (isRouteErrorResponse(error)) {\n    return (\n      <Document>\n                <div className=\"error-container\">\n                    <h1>\n                        {error.status} {error.statusText} {error.data}\n                    </h1>\n                </div>\n            </Document>);\n\n  }\n\n  const err = (error as Error);\n  console.error(error, err);\n\n  return (\n    <Document>\n\t\t\t<div className=\"error-container\">\n\t\t\t\t<h1>App Error</h1>\n\t\t\t\t<pre>{err?.message ?? error}</pre>\n\t\t\t</div>\n\t\t</Document>);\n\n}", "import { SpotifyApi } from \"@spotify/web-api-ts-sdk\";\nimport type { PlayHistory,PlaybackState, UserProfile, Queue, SearchResults } from \"@spotify/web-api-ts-sdk\";\n\nimport { GetStorageValue, SetStorageValue } from './utils';\n\ntype MaxInt<T extends number> = number extends T ? number : _Range<T, []>;\ntype _Range<T extends number, R extends unknown[]> = R['length'] extends T ? R[number] | T : _Range<T, [R['length'], ...R]>;\n\ntype SpotifyTokens = {\n    access_token:   string\n    refresh_token:  string\n    expires_in:     number\n    created_at:     number\n}\n\nconst tokens_default: SpotifyTokens = {\n    access_token: \"\",\n    refresh_token: \"\",\n    expires_in: 0,\n    created_at: 0,\n} as const;\n\n\n\n//                     ________  ________  ________  _________  ___  ________ ___    ___ ___  ___  ________  ________   ________  ___       _______   ________     \n//                    |\\   ____\\|\\   __  \\|\\   __  \\|\\___   ___\\\\  \\|\\  _____\\\\  \\  /  /|\\  \\|\\  \\|\\   __  \\|\\   ___  \\|\\   ___ \\|\\  \\     |\\  ___ \\ |\\   __  \\    \n//                    \\ \\  \\___|\\ \\  \\|\\  \\ \\  \\|\\  \\|___ \\  \\_\\ \\  \\ \\  \\__/\\ \\  \\/  / | \\  \\\\\\  \\ \\  \\|\\  \\ \\  \\\\ \\  \\ \\  \\_|\\ \\ \\  \\    \\ \\   __/|\\ \\  \\|\\  \\   \n//                     \\ \\_____  \\ \\   ____\\ \\  \\\\\\  \\   \\ \\  \\ \\ \\  \\ \\   __\\\\ \\    / / \\ \\   __  \\ \\   __  \\ \\  \\\\ \\  \\ \\  \\ \\\\ \\ \\  \\    \\ \\  \\_|/_\\ \\   _  _\\  \n//                      \\|____|\\  \\ \\  \\___|\\ \\  \\\\\\  \\   \\ \\  \\ \\ \\  \\ \\  \\_| \\/  /  /   \\ \\  \\ \\  \\ \\  \\ \\  \\ \\  \\\\ \\  \\ \\  \\_\\\\ \\ \\  \\____\\ \\  \\_|\\ \\ \\  \\\\  \\| \n//                        ____\\_\\  \\ \\__\\    \\ \\_______\\   \\ \\__\\ \\ \\__\\ \\__\\__/  / /      \\ \\__\\ \\__\\ \\__\\ \\__\\ \\__\\\\ \\__\\ \\_______\\ \\_______\\ \\_______\\ \\__\\\\ _\\ \n//                       |\\_________\\|__|     \\|_______|    \\|__|  \\|__|\\|__|\\___/ /        \\|__|\\|__|\\|__|\\|__|\\|__| \\|__|\\|_______|\\|_______|\\|_______|\\|__|\\|__|\n//                       \\|_________|                                       \\|___|/                                                                                \n\n\n\n\nexport default class SpotifyHandler {\n    public static readonly BACK_API = \"http://localhost:3100/sharify\";\n\n    private sdk: SpotifyApi | null = null;\n    private tokens = tokens_default;\n    private client_id = \"\";\n    private redirectURI = \"http://localhost:3000/auth_spotify\";\n    private scopes = \"user-read-private user-read-email user-modify-playback-state user-read-playback-position user-library-read streaming user-read-playback-state user-read-recently-played playlist-read-private\";\n    private timeout: ReturnType<typeof setTimeout> | null =  null;\n    private code_verifier = \"\";\n    private code_challenge = \"\";\n    \n    public current_device: SpotifyApi.UserDevice | undefined;\n    public is_owner = true;\n    public is_ready = false;\n\n    constructor(client_id: string) {\n        if (client_id == \"\") {\n            throw new Error(\"No client id provided\");\n        }\n\n        this.client_id = client_id;\n    }\n\n    public InitSdk() {\n        this.sdk = SpotifyApi.withAccessToken(this.client_id, {\n            ...this.tokens,\n            token_type: \"code\",\n        }, { afterRequest: this.HandleRequests });\n    }\n\n    public async GenerateAuthLink() {\n        try {\n            let res = await fetch(`${SpotifyHandler.BACK_API}/code_verifier`, { method: \"GET\" });\n            this.code_verifier = await res.text();\n\n            SetStorageValue({ code_verifier: this.code_verifier });\n\n            res = await fetch(`${SpotifyHandler.BACK_API}/code_challenge/${this.code_verifier}`, { method: \"GET\" });\n            this.code_challenge = await res.text();\n\n            const url = new URL(\"https://accounts.spotify.com/authorize\");\n\n            url.search = new URLSearchParams({\n                \"client_id\": this.client_id,\n                \"response_type\": \"code\",\n                \"redirect_uri\": encodeURI(this.redirectURI),\n                \"show_dialog\": \"true\",\n                \"scope\": this.scopes,\n                \"code_challenge_method\": 'S256',\n                \"code_challenge\": this.code_challenge,\n            }).toString();\n\n            return url.toString();\n        } catch (error: any) {\n            console.error(error);\n            return new Error(error);\n        }\n    }\n\n    /**\n    * Can throw Error on failed request, bad status code or empty body\n    */\n    private async CallAuthorizationAPI(body: URLSearchParams) {\n        try {\n            const res = await fetch(\"https://accounts.spotify.com/api/token\", {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                body\n            });\n\n            if (res.status != 200) {\n                const error = new Error(`[CallAuthorizationAPI ${res.status}] Error: ${res.statusText} Response text: ${await res.text()}; Body supplied: ${body}`);\n                console.error(error);\n                throw error;\n            }\n\n            const json: SpotifyTokens = await res.json();\n\n            if (!json || !json.access_token) {\n                console.error(res);\n                throw new Error(`[CallAuthorizationAPI] Error: empty body. Response json: ${json}; Body supplied: ${body}`);\n            }\n\n            this.ProcessTokens(json);\n        } catch (error: any) {\n            console.error(error);\n        }\n    }\n\n    public ProcessTokens(data: Partial<SpotifyTokens>) {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.tokens = { ...tokens_default, ...data };\n        this.tokens.created_at = data.created_at ?? Date.now();\n\n        // expires_in (usually 3k6s, so) 3600 * 1000 in ms => 1h ; (1000 * 60 * 60) 60 min => 1h as default\n        const expires_in = this.tokens.expires_in && this.tokens.expires_in > 0\n            ? (this.tokens.expires_in * 1000)\n            : (1000 * 60 * 60);\n\n        const msDiff = (this.tokens.created_at + expires_in) - Date.now();\n        if (msDiff <= 0) {\n            return this.RefreshAccessToken();\n        }\n\n        this.timeout = setTimeout(\n            this.RefreshAccessToken,\n            msDiff\n        );\n        this.TokenFetchingEnded()\n    }\n\n    public FetchAccessToken(code: string) {\n        const code_verifier = GetStorageValue(\"code_verifier\");\n\n        if (code_verifier == null) {\n            throw new Error(\"No code verifier on local storage\");\n        }\n\n        const params = new URLSearchParams({\n            \"client_id\": this.client_id,\n            \"grant_type\": \"authorization_code\",\n            \"code\": code,\n            \"redirect_uri\": encodeURI(this.redirectURI),\n            \"code_verifier\": code_verifier,\n        });\n\n        this.CallAuthorizationAPI(params);\n    }\n\n    private RefreshAccessToken() {\n        const params = new URLSearchParams({\n            \"client_id\": this.client_id,\n            \"grant_type\": \"refresh_token\",\n            \"refresh_token\": this.tokens.refresh_token,\n        });\n\n        this.CallAuthorizationAPI(params);\n    }\n\n    public async TokenFetchingEnded() {\n        SetStorageValue({\n            st: {\n                at: this.tokens.access_token,\n                rt: this.tokens.refresh_token,\n                ein: this.tokens.expires_in,\n                date: this.tokens.created_at\n            }\n        });\n\n        const deviceName = GetStorageValue(\"SpotifyDevice\");\n\n        try {\n            const { devices } = await this.sdk!.player.getAvailableDevices();\n            this.current_device = deviceName\n                ? devices.find(device => device.name == deviceName)\n                : devices.find(device => device.is_active);\n\n            if (this.current_device) {\n                SetStorageValue({ SpotifyDevice: JSON.stringify(this.current_device) });\n            }\n        } catch (error) {\n            //location.replace(this.GetAuthLink());\n            console.error(error);\n            return;\n        }\n\n        this.InitSdk();\n        this.is_ready = true;\n    }\n\n    private LinkToURI(link: string) {\n        return `spotify:track:${link.split('/').pop()}`.split('?').length > 1\n            ? `spotify:track:${link.split('/').pop()?.split('?').shift()}`\n            : `spotify:track:${link.split('/').pop()}`;\n    }\n    \n    public GetTokens() {\n        return this.tokens;\n    }\n\n    private SetTokens() {\n        const tokens = GetStorageValue(\"st\");\n\n        if (tokens == null) {\n            throw new Error(\"No Spotify tokens on local storage\");\n        }\n\n        this.ProcessTokens({\n            access_token: tokens.at,\n            refresh_token: tokens.rt,\n            expires_in: tokens.ein,\n            created_at: tokens.date\n        });\n    }\n\n    private EnsureInitialized() {\n        if (this.is_ready) {\n            return;\n        }\n\n        this.SetTokens();\n    }\n\n    private ExceededQota<T extends { status: number }>(request: T): boolean {\n        // Handle retry-after HEADER\n\n        return request.status == 429;\n    }\n\n    private HandleRequests(_url: string, _options: RequestInit, response: Response) {\n        if (this.ExceededQota(response)) {\n            throw new Error(\"Spotify API Quota excedeed, be patient\");\n        }\n    }\n\n\n    Disconnect() {\n        this.is_ready = false;\n        this.tokens = tokens_default;\n\n        SetStorageValue({ st: null });\n    }\n\n    Pause() {\n        this.EnsureInitialized();\n        return new Promise<SpotifyHandler>(async (resolve, reject) => {\n            try {\n                await this.sdk!.player.pausePlayback(this.current_device?.id ?? \"\");\n\n                resolve(this);\n            } catch (error: any) {\n                reject(new Error(`There was an error pausing track. (${error})`));\n            }\n        });\n    }\n\n    Resume() {\n        this.EnsureInitialized();\n        return new Promise<SpotifyHandler>(async (resolve, reject) => {\n            try {\n                await this.sdk!.player.startResumePlayback(this.current_device?.id ?? \"\");\n\n                resolve(this);\n            } catch (error: any) {\n                reject(new Error(`There was an error resuming track. (${error})`));\n            }\n        });\n    }\n\n    AddNextTrack(link: string) {\n        this.EnsureInitialized();\n        return new Promise<void | Error>(async (resolve, reject) => {\n            try {\n                await this.sdk!.player.addItemToPlaybackQueue(this.LinkToURI(link), this.current_device?.id ?? \"\");\n\n                resolve();\n            } catch (error: any) {\n                reject(new Error(`There was an error adding track to the queue. (${error})`));\n            }\n        });\n    }\n\n    SkipToPrevious() {\n        this.EnsureInitialized();\n        return new Promise<SpotifyHandler>(async (resolve, reject) => {\n            try {\n                await this.sdk!.player.skipToPrevious(this.current_device?.id ?? \"\");\n\n                resolve(this);\n            } catch (error: any) {\n                reject(new Error(`There was an error skiping to previous track. (${error})`));\n            }\n        });\n    }\n\n    SkipToNext() {\n        this.EnsureInitialized();\n        return new Promise<SpotifyHandler>(async (resolve, reject) => {\n            try {\n                await this.sdk!.player.skipToNext(this.current_device?.id ?? \"\");\n\n                resolve(this);\n            } catch (error: any) {\n                reject(new Error(`There was an error skiping to next track. (${error})`));\n            }\n        });\n    }\n\n    GetRecentlyPlayedTracks(limit: MaxInt<50>) {\n        this.EnsureInitialized();\n        return new Promise<Array<PlayHistory> | Error>(async (resolve, reject) => {\n            try {\n                const { items } = await this.sdk!.player.getRecentlyPlayedTracks(limit);\n\n                resolve(items);\n            } catch (error: any) {\n                reject(new Error(`There was an error showing the ${limit} recently played tracks. (${error})`));\n            }\n        });\n    }\n\n    SetVolume(value: number) {\n        this.EnsureInitialized();\n        return new Promise<void | Error>(async (resolve, reject) => {\n            try {\n                await this.sdk!.player.setPlaybackVolume(value, this.current_device?.id ?? \"\");\n\n                resolve();\n            } catch (error: any) {\n                reject(new Error(`There was an error setting volume to ${value}. (${error})`));\n            }\n        });\n    }\n\n    GetCurrentTrackData() {\n        this.EnsureInitialized();\n        return new Promise<PlaybackState | Error>(async (resolve, reject) => {\n            try {\n                const state = await this.sdk!.player.getPlaybackState();\n\n                resolve(state);\n            } catch (error: any) {\n                reject(new Error(`There was an error getting current playback response (${error})`));\n            }\n        });\n    }\n\n    SearchTracks(input: string) {\n        this.EnsureInitialized();\n        return new Promise<SearchResults<Array<\"track\">> | Error>(async (resolve, reject) => {\n            try {\n                // @ts-ignore\n                const res = await this.sdk!.search(input, [\"tracks\"], undefined, 10);\n\n                resolve(res);\n            } catch (error: any) {\n                reject(new Error(`There was an error searching for tracks with ${input} (${error})`));\n            }\n        });\n    }\n\n    GetDevices() {\n        this.EnsureInitialized();\n        return new Promise<Array<SpotifyApi.UserDevice> | Error>(async (resolve, reject) => {\n            try {\n                const { devices } = await this.sdk!.player.getAvailableDevices();\n\n                resolve(devices);\n            } catch (error: any) {\n                reject(new Error(`There was an error searching for devices (${error})`));\n            }\n        });\n    }\n\n    Seek(position: number) {\n        this.EnsureInitialized();\n        return new Promise<void | Error>(async (resolve, reject) => {\n            try {\n                await this.sdk!.player.seekToPosition(position, this.current_device?.id ?? \"\");\n\n                resolve();\n            } catch (error: any) {\n                reject(new Error(`There was an error seeking to ${position} (${error})`))\n            }\n        });\n    }\n\n    GetProfile(): Promise<UserProfile | Error> {\n        if (!this.is_owner) {\n            this.Disconnect();\n            return new Promise<Error>((_, reject) => reject(new Error()));\n        }\n\n        this.EnsureInitialized();\n        return new Promise<UserProfile | Error>(async (resolve, reject) => {\n            try {\n                const profile = await this.sdk!.currentUser.profile();\n\n                resolve(profile);\n            } catch (error: any) {\n                reject(new Error(`There was an error getting profile (${error})`))\n            }\n        });\n    }\n\n    GetCurrentQueueData() {\n        this.EnsureInitialized();\n        return new Promise<Queue | Error>(async (resolve, reject) => {\n            try {\n                const queue = await this.sdk!.player.getUsersQueue();\n\n                resolve(queue);\n            } catch (error: any) {\n                reject(new Error(`There was an error getting current queue data (${error})`));\n            }\n        });\n    }\n\n    SetDevice(device: SpotifyApi.UserDevice) {\n        this.current_device = device;\n    }\n}\n", "import { useEffect, useState } from \"react\";\n\ninterface LocalStorage {\n    st: SpotifyTokensStorage | null\n    SpotifyDevice: string\n    code_verifier: string\n}\n\nexport interface SpotifyTokensStorage {\n    at: string\n    rt: string\n    ein: number\n    date: number\n}\n\ntype StorageType<T> = T extends keyof LocalStorage ? LocalStorage[T] : never;\n\n/**\n * Can throw if localStorage and window.localStorage are not available\n */\nexport const SetStorageValue = (value: Partial<LocalStorage>): void => {\n\tif (!localStorage || !window.localStorage) throw new Error(\"Cannot access localStorage nor window.localStorage\");\n    const store = localStorage ?? window.localStorage;\n\n    const storage = store.getItem('Sharify');\n\n    if (storage == null) {\n        store.setItem('Sharify', JSON.stringify(value));\n        return;\n    }\n\n    const parsed_storage = JSON.parse(storage);\n\n    store.setItem('Sharify', JSON.stringify({ ...parsed_storage, ...value }));\n\n    return;\n}\n\n/**\n * Can throw if localStorage and window.localStorage are not available\n */\nexport function GetStorageValue<T extends keyof LocalStorage>(value: T): StorageType<T> | null {\n\tif (!localStorage || !window.localStorage) return {} as StorageType<T>; //throw new Error(\"Cannot access localStorage nor window.localStorage\");\n    const store = localStorage ?? window.localStorage;\n\n\tconst store_object = JSON.parse(store.getItem('Sharify') || \"{}\") as LocalStorage;\n\n\tconst returns = store_object[value] as StorageType<T>;\n\n    return returns == {} as StorageType<T> ? null : returns;\n}\n\nexport function useDebounce(value: any, delay: number = 500) {\n\tconst [debouncedValue, setDebouncedValue] = useState(value);\n\n\tuseEffect(() => {\n\t\tconst handler = setTimeout(() => setDebouncedValue(value), delay);\n\n\t\treturn () => clearTimeout(handler);\n\t}, [value, delay]);\n\n\treturn debouncedValue;\n}\n\nexport function FormatTime(progress: number, duration: number) {\n    const [p, m] = [new Date(progress), new Date(duration)];\n\n    const FormatNumber = (int: number): string => {\n        return int.toString().padStart(2, '0');\n    }\n\n    return `${FormatNumber(p.getMinutes())}:${FormatNumber(p.getSeconds())} / ${FormatNumber(m.getMinutes())}:${FormatNumber(m.getSeconds())}`;\n}\n", "import dotenv from 'dotenv';\nimport { createCookieSessionStorage, redirect } from \"@remix-run/node\";\n\ndotenv.config();\n\ntype SessionProperty =  \"username\" | \"SpotifyTokens\";\n\nconst sessionSecret = process.env.SESSION_SECRET;\n\nif (!sessionSecret) {\n    throw new Error(\"SESSION_SECRET must be set\");\n}\n\nconst storage = createCookieSessionStorage({\n    cookie: {\n        name: \"Sharify_session\",\n        // normally you want this to be `secure: true`\n        // but that doesn't work on localhost for Safari\n        // https://web.dev/when-to-use-local-https/\n        secure: process.env.NODE_ENV === \"production\",\n        secrets: [sessionSecret],\n        sameSite: \"lax\",\n        path: \"/\",\n        maxAge: 60 * 60 * 24 * 30,\n        httpOnly: true,\n    },\n});\n\nfunction getUserSession(request: Request) {\n    return storage.getSession(request.headers.get(\"Cookie\"));\n}\n\nexport async function getSessionData(\n    request: Request,\n    property: SessionProperty\n) {\n    const session = await getUserSession(request);\n    const data = session.get(property);\n\n    if (!data || typeof data != \"string\") return null;\n\n    return data;\n}\n\nexport async function setSessionData(\n    request: Request,\n    property: SessionProperty,\n    data: string,\n    redirectTo: string\n) {\n    const session = await getUserSession(request);\n\n    session.set(property, data);\n\n    return redirect(redirectTo, {\n        headers: {\n            \"Set-Cookie\": await storage.commitSession(session),\n        },\n    });\n}\n\nexport async function unsetSessionData(\n    request: Request,\n    property: string,\n    redirectTo: string\n) {\n    const session = await getUserSession(request);\n\n    session.unset(property);\n\n    return redirect(redirectTo, {\n        headers: {\n            \"Set-Cookie\": await storage.commitSession(session),\n        },\n    });\n}\n\nexport async function createUserSession(redirectTo: string) {\n    const session = await storage.getSession();\n\n    return redirect(redirectTo, {\n        headers: {\n            \"Set-Cookie\": await storage.commitSession(session),\n        },\n    });\n}\n\nexport async function destroyUserSession(request: Request, redirectTo: string) {\n    return redirect(redirectTo, {\n        headers: {\n            \"Set-Cookie\": await storage.destroySession(await getUserSession(request)),\n        },\n    });\n}\n", "export interface Party {\n    id:                 number\n    name:               string\n    clients:            Array<PartyClient>\n    bannedClients:      Array<PartyClient['username']>\n    isPrivate:          boolean\n    password:           string | null\n    type:               'Spotify'// | 'Youtube'\n    spotifyCreds: {\n        accessToken:    string\n        refreshToken:   string\n        expiresIn:      number\n        date:           number\n    }\n    currentDevice:      SpotifyApi.UserDevice | null\n    tracksQueue:        Array<PartyTrack>\n    MAX_CLIENTS:        number\n}\n\ntype PartyTrack = {\n    username:   PartyClient['username']\n    trackId:    string\n    trackName:  string\n}\n\ninterface PartyClient {\n    username:   string\n    isHost:     boolean\n}\n\nexport interface GetPartyReturnType {\n    message:    string | 'NOT_ACTIVE' | 'USER_CHANGED' | 'ERROR'\n    found?:     true | undefined\n    partyData?: Party | undefined\n}\n\n\n//                                              /$$$$$$  /$$$$$$$  /$$$$$$\n//                                             /$$__  $$| $$__  $$|_  $$_/\n//                                            | $$  \\ $$| $$  \\ $$  | $$  \n//                                            | $$$$$$$$| $$$$$$$/  | $$  \n//                                            | $$__  $$| $$____/   | $$  \n//                                            | $$  | $$| $$        | $$  \n//                                            | $$  | $$| $$       /$$$$$$\n//                                            |__/  |__/|__/      |______/\n\n\nexport default class SharifyAPI {\n    private static MAX_CLIENTS = 15;\n    private ACTIVE_PARTIES: Map<number, Party>;\n    private USERS: Set<string>;\n    private INDEX = 1;\n    private DEBUG_MODE = true;\n  \n    constructor() {\n        this.ACTIVE_PARTIES = new Map<number, Party>();\n        this.USERS = new Set<string>();\n    }\n  \n    CreateParty(\n        clients:        Party['clients'],\n        name:           Party['name'],\n        isPrivate:      Party['isPrivate'],\n        type:           Party['type'],\n        spotifyCreds:   Party['spotifyCreds'],\n        password?:      Party['password'],\n    ): Party | PartyError {\n        this.ACTIVE_PARTIES.set(this.INDEX, {\n            id: this.INDEX,\n            clients,\n            bannedClients: [],\n            name,\n            isPrivate,\n            password: password != undefined ? password : null,\n            type,\n            spotifyCreds,\n            currentDevice: null,\n            tracksQueue: [],\n            MAX_CLIENTS: SharifyAPI.MAX_CLIENTS,\n        });\n  \n        this.LogDebug(`[${this.INDEX}]${isPrivate ? 'Private party' : 'Party'} '${name}' created.`);\n        \n        this.INDEX ++;\n\n        const party = this.ACTIVE_PARTIES.get(this.INDEX - 1);\n        \n        if (!party) {\n            console.error(`Cannot create party (${party}) clients ${clients}, name ${name}, isprivate ${isPrivate}, type ${type}, password ${password}`);\n            return new PartyError(`An error has occured while creating this party, please, contact Snoupix`);\n        }\n\n        this.USERS.add(party.clients[0].username);\n\n        return party;\n    }\n  \n    DeleteParty(id: Party['id'], username: string) {\n        const party = this.ACTIVE_PARTIES.get(id);\n\n        if (!party) return this.LogDebug(`${username} tried to delete a non-existing party ${id}`);\n\n        if (party.clients.find(client => client.isHost == true)?.username != username) {\n            this.LogDebug(`${username} tried to delete party id ${id} while not being the host`);\n        }\n\n        this.LogDebug(`${username} is deleting '${party.name}' party ${id}`);\n\n        party.clients.map(client => this.USERS.delete(client.username));\n    \n        this.ACTIVE_PARTIES.delete(id);\n    }\n  \n    GetParty(id: Party['id']): Party | null {\n        const party = this.ACTIVE_PARTIES.get(id);\n        \n        if (!party) {\n            this.LogDebug(`Cannot find party id: ${id}`);\n            return null;\n        }\n\n        return party;\n    }\n\n    GetUserParty(username: string): Party | null {\n        let party: Party | null = null;\n\n        this.ACTIVE_PARTIES.forEach(p => {\n            p.clients.forEach(client => {\n                if (client.username == username) {\n                    party = p;\n                    return;\n                }\n            })\n        })\n\n        return party;\n    }\n\n    GetParties(privateFilter: boolean) {\n        const returning = new Array<Party>();\n\n        if (!privateFilter) {\n            this.ACTIVE_PARTIES.forEach(party => returning.push(party));\n\n            this.LogDebug(`Returning every parties to the client (${returning.length})`);\n\n            return returning;\n        }\n\n        this.ACTIVE_PARTIES.forEach(party => {\n            if (!party.isPrivate) {\n                returning.push(party);\n            }\n        })\n\n        this.LogDebug(`Returning ${returning.length} private parties to the client`);\n\n        return returning;\n    }\n\n    AddToTracksQueue(\n        id: Party['id'],\n        username: PartyClient['username'],\n        trackId: PartyTrack['trackId'],\n        trackName: PartyTrack['trackName']\n    ) {\n        const party = this.ACTIVE_PARTIES.get(id);\n        \n        if (!party) {\n            this.LogDebug(`Cannot find party id: ${id}`);\n            return;\n        }\n\n        party.tracksQueue.push({ trackId, username, trackName });\n\n        this.ACTIVE_PARTIES.set(id, party);\n\n        this.LogDebug(`${username} added ${trackName} to party ${party.name} ${id}`);\n    }\n\n    RemoveFromTracksQueue(id: Party['id'], trackNAME: PartyTrack['trackName']) {\n        const party = this.ACTIVE_PARTIES.get(id);\n        \n        if (!party) {\n            this.LogDebug(`Cannot find party id: ${id}`);\n            return;\n        }\n\n        const trackFound = party.tracksQueue.find(({ trackName }) => trackName == trackNAME);\n\n        if (trackFound) {\n            let avoidDuplicate = false;\n            const newQueue: Party['tracksQueue'] = [];\n\n            party.tracksQueue.forEach(t => {\n                if (avoidDuplicate) return newQueue.push(t);\n\n                if (t.trackName == trackFound.trackName) {\n                    avoidDuplicate = true;\n                    return;\n                }\n\n                newQueue.push(t);\n            })\n\n            party.tracksQueue = newQueue;\n    \n            this.ACTIVE_PARTIES.set(id, party);\n    \n            this.LogDebug(`Removed ${trackNAME} from party ${party.name} ${id}`);\n        }\n    }\n\n    KickUser(id: Party['id'], username: string) {\n        const party = this.ACTIVE_PARTIES.get(id);\n        \n        if (!party) {\n            this.LogDebug(`Cannot find party id: ${id}`);\n            return;\n        }\n\n        const clients = party.clients.filter(client => client.username != username);\n\n        party.clients = clients;\n\n        this.ACTIVE_PARTIES.set(id, party);\n\n        this.USERS.delete(username);\n\n        this.LogDebug(`Kicked ${username} from party ${party.name} ${id}`);\n    }\n\n    BanUser(id: Party['id'], username: string) {\n        const party = this.ACTIVE_PARTIES.get(id);\n        \n        if (!party) {\n            this.LogDebug(`Cannot find party id: ${id}`);\n            return;\n        }\n\n        this.KickUser(id, username);\n\n        party.bannedClients.push(username);\n\n        this.ACTIVE_PARTIES.set(id, party);\n\n        this.LogDebug(`Banned ${username} from party ${party.name} ${id}`);\n    }\n\n    JoinParty(id: Party['id'], username: string) {\n        const party = this.ACTIVE_PARTIES.get(id);\n        \n        if (!party) {\n            this.LogDebug(`Cannot find party id: ${id}`);\n            return;\n        }\n\n        if (party.clients.length + 1 > SharifyAPI.MAX_CLIENTS) {\n            return new PartyError(`[Party full] Max clients exceeded: ${SharifyAPI.MAX_CLIENTS}`);\n        }\n\n        if (this.UsernameExists(username)) {\n            return new PartyError(`Error: username \"${username}\" is already in use`);\n        }\n\n        party.clients.push({ isHost: false, username });\n\n        this.ACTIVE_PARTIES.set(id, party);\n        this.USERS.add(username);\n\n        this.LogDebug(`Added ${username} to party ${party.name} ${id}`);\n    }\n\n    LeaveParty(id: Party['id'], username: string) {\n        const party = this.ACTIVE_PARTIES.get(id);\n        \n        if (!party) {\n            this.LogDebug(`Cannot find party id: ${id}`);\n            return;\n        }\n\n        party.clients = party.clients.filter(client => client.username != username);\n\n        this.ACTIVE_PARTIES.set(id, party);\n        this.USERS.delete(username);\n\n        this.LogDebug(`Removed ${username} from party ${party.name} ${id}`);\n    }\n\n    RemoveFromParty(username: PartyClient['username']) {\n        if (this.UsernameExists(username)) {\n            this.ACTIVE_PARTIES.forEach((party, i) => {\n                const client = party.clients.find(client => client.username == username);\n\n                if (client) {\n                    if (client.isHost) {\n                        this.DeleteParty(i, username);\n                    } else {\n                        this.LeaveParty(i, username);\n                    }\n\n                    this.LogDebug(`${username} is deleting party ${i} by leaving`);\n\n                    return;\n                }\n            })\n        }\n    }\n\n    UsernameExists(username: string): boolean {\n        return this.USERS.has(username);\n    }\n\n    LogDebug(...args: any[]) {\n        if (this.DEBUG_MODE) {\n            console.log(...args);\n        }\n    }\n}\n\nexport class PartyError extends Error {}\n", "import SharifyAPI from './api.server';\n\nlet api: SharifyAPI;\n\ndeclare global {\n    var __api: SharifyAPI | undefined\n}\n\n// this is needed because in development we don't want to restart\n// the server with every change, but we want to make sure we don't\n// create a new connection to the DB with every change either.\nif (process.env.NODE_ENV === \"production\") {\n\tapi = new SharifyAPI();\n} else {\n\tif (!global.__api) {\n        global.__api = new SharifyAPI();\n    }\n\n    api = global.__api;\n}\n\nexport { api }\n", "import { json } from \"@remix-run/node\";\nimport type { ActionFunction, LoaderFunction } from \"@remix-run/node\";\nimport { useEffect, useState } from \"react\";\nimport { Link, useLoaderData, useOutletContext, useSubmit } from \"@remix-run/react\";\n\nimport Title from \"~/components/title\";\nimport { getSessionData, setSessionData } from \"~/server/session.server\";\nimport type { OutletContext } from \"~/root\";\n\ntype LoaderData = {\n    SpotifyTokens: {\n        sat: string\n        srt: string\n        ein: number\n        date: number\n    }\n}\n\nexport const action: ActionFunction = async ({\n    request\n}) => {\n    const formData = await request.formData();\n    const sTokens = formData.get(\"spotifyTokens\") as string;\n\n    return await setSessionData(request, \"SpotifyTokens\", sTokens, \"/host\");\n}\n\nexport const loader: LoaderFunction = async ({\n    request\n}) => {\n    const SpotifyTokens = await getSessionData(request, \"SpotifyTokens\");\n\n    if (SpotifyTokens) {\n        return json({ SpotifyTokens: JSON.parse(SpotifyTokens) });\n    }\n\n    return null;\n}\n\nexport default function Auth_Spotify() {\n    const loaderData = useLoaderData<LoaderData>();\n    const { spotify } = useOutletContext<OutletContext>();\n    const submit = useSubmit();\n\tconst [text, setText] = useState(\"\");\n    const [fetched, setFetched] = useState(false);\n    const [isReady, setIsReady] = useState(false);\n\n    useEffect(() => {\n        if (spotify == null) return;\n\n        const interval = setInterval(() => {\n            if (spotify.is_ready) {\n                setIsReady(true);\n                clearInterval(interval);\n            }\n        }, 5000);\n\n        return () => clearInterval(interval);\n    }, [spotify])\n\n    useEffect(() => {\n        if (fetched || spotify == null) return;\n\n        const params = new URLSearchParams(location.search);\n        const code = params.get(\"code\");\n        const error = params.get(\"error\");\n\n        if (code) {\n            setFetched(true);\n            return spotify.FetchAccessToken(code);\n        }\n\n        if (error) {\n            setFetched(true);\n            return setText(`Error: ${error}`);\n        }\n\n        if (loaderData && loaderData.SpotifyTokens) {\n            const expires_in = (\n                loaderData.SpotifyTokens.ein > 0 && loaderData.SpotifyTokens.ein <= 3600\n                    ? loaderData.SpotifyTokens.ein\n                    : 3600\n            ) * 1000;\n            const msDiff = (loaderData.SpotifyTokens.date + expires_in) - Date.now();\n\n            if (msDiff > 0) {\n                setFetched(true);\n                return spotify.ProcessTokens({\n                    access_token: loaderData.SpotifyTokens.sat,\n                    refresh_token: loaderData.SpotifyTokens.srt,\n                    expires_in: loaderData.SpotifyTokens.ein,\n                    created_at: loaderData.SpotifyTokens.date\n                });\n            }\n        }\n\n        (async () => {\n            const url = await spotify.GenerateAuthLink();\n\n            if (url instanceof Error) {\n                console.error(error);\n                setText(`Error: ${error}`);\n                return;\n            }\n\n            location.replace(url);\n        })()\n    }, [loaderData, fetched, spotify])\n\n    useEffect(() => {\n        if (isReady) {\n            (async () => {\n                setFetched(true);\n\n                const profile = await spotify.GetProfile();\n\n                if (!(profile instanceof Error)) {\n                    setText(`Successfully connected to ${profile.display_name}`);\n                }\n                \n                const tokens = spotify.GetTokens();\n    \n                setTimeout(() => {\n                    submit(\n                        {\n                            spotifyTokens: JSON.stringify({\n                                sat: tokens.accessToken,\n                                srt: tokens.refreshToken,\n                                ein: tokens.expires_in,\n                                date: tokens.date,\n                            })\n                        },\n                        { method: 'post' }\n                    );\n                }, 1000);\n            })()\n        }\n    }, [isReady, submit])\n\n    return (\n        <div className=\"flex flex-col items-center justify-center content-center h-screen text-main-color font-semibold\">\n            <Title />\n            {\n                text != \"\" ?\n                <Link to=\"/host\" className=\"text-4xl\" data-cy=\"auth-text\">{text}</Link> :\n                <div className=\"loader\"></div>\n            }\n        </div>\n    );\n}\n", "import { Link, useLocation } from \"@remix-run/react\";\r\n\r\nexport default function Title() {\r\n    const location = useLocation();\r\n\r\n    const defaultStyle = \"z-10 font-kaushan text-shadow font-bold text-2xl md:text-3xl xl:text-5xl\";\r\n    const topLeftStyle = \"z-10 font-kaushan text-shadow font-bold text-2xl md:text-3xl xl:text-5xl absolute top-0 left-0 p-8\";\r\n\r\n    return <Link data-cy=\"home-btn\" className={location.pathname == \"/\" ? defaultStyle : topLeftStyle} to=\"/\">Sharify</Link>;\r\n}\r\n", "import { useCallback, useEffect, useReducer, useRef, useState } from \"react\";\nimport { useFetcher, useLoaderData, useNavigate, useOutletContext } from \"@remix-run/react\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport type { LoaderFunction, ActionFunction } from \"@remix-run/node\";\nimport { redirect, json } from \"@remix-run/node\";\n\nimport { api } from \"~/server/handlers.server\";\nimport Title from \"~/components/title\";\nimport { GetStorageValue, SetStorageValue, useDebounce } from \"~/utils/utils\";\nimport { getSessionData } from \"~/server/session.server\";\nimport HostRoom from \"~/components/hostRoom\";\nimport ClientRoom from \"~/components/clientRoom\";\nimport type { Party } from \"~/server/api.server\";\nimport type { OutletContext } from \"~/root\";\n\nexport type RoomData = {\n    title:          string\n    searchInput:    string\n    progressMS:     number\n    durationMS:     number\n    volume:         number\n    seekPos:        number\n    isPlaying:      boolean\n    clients:        Party['clients']\n    partyTracksQ:   Party['tracksQueue']\n    currentDevice:  Party['currentDevice']\n    devices:        Array<SpotifyApi.UserDevice>\n    searchResults:  Array<SpotifyApi.TrackObjectFull>\n    recentTracks:   Array<SpotifyApi.PlayHistoryObject>\n    tracksQueue:    Array<SpotifyApi.TrackObjectFull | SpotifyApi.EpisodeObjectFull>\n}\n\nexport type FetcherData = {\n    isPartyDeleted: boolean\n    clients:        Party['clients']\n    tracksQueue:    Party['tracksQueue']\n}\n\ntype LoaderData = {\n    isHost:         boolean\n    party:          Party,\n    errorMessage:   string\n    redirect:       string | undefined\n}\n\nexport const action: ActionFunction = async ({\n    request,\n    params\n}) => {\n    const username = await getSessionData(request, \"username\");\n    const formData = await request.formData();\n\tconst fetchType = formData.get(\"type\") as string;\n    const id = params.roomID;\n\n    if (!id || !username) {\n        return redirect('/');\n    }\n\n    switch (fetchType) {\n        case \"fetchData\":\n            const currentTrack = formData.get(\"currentTrack\") as string;\n            const party = api.GetParty(parseInt(id));\n\n            if (!party) {\n                return json<FetcherData>({\n                    tracksQueue: [],\n                    clients: [],\n                    isPartyDeleted: true\n                });\n            }\n\n            api.RemoveFromTracksQueue(parseInt(id), currentTrack);\n\n            return json<FetcherData>({\n                tracksQueue: party.tracksQueue,\n                clients: party.clients,\n                isPartyDeleted: false\n            });\n        case \"deleteRoom\":\n            api.DeleteParty(parseInt(id), username);\n            return redirect('/');\n        case \"leaveRoom\":\n            api.LeaveParty(parseInt(id), username);\n            return redirect('/');\n        case \"addToQueue\":\n            const trackId = formData.get(\"trackId\") as string;\n            const trackName = formData.get(\"trackName\") as string;\n\n            api.AddToTracksQueue(parseInt(id), username, trackId, trackName);\n            return null;\n        case \"kick\": {\n            const target = formData.get(\"username\") as string;\n\n            api.KickUser(parseInt(id), target);\n            return null;\n        }\n        case \"ban\": {\n            const target = formData.get(\"username\") as string;\n\n            api.BanUser(parseInt(id), target);\n            return null;\n        }\n    }\n\n    return null;\n}\n\nexport const loader: LoaderFunction = async ({\n    request,\n    params\n}) => {\n    const id = params.roomID;\n\n    if (!id) {\n        return redirect('/');\n    }\n\n    const party = api.GetParty(parseInt(id));\n\n    if (!party) {\n        return json({ errorMessage: \"Error: Party not created or deleted\", redirect: \"/host\" });\n    }\n\n    const username = await getSessionData(request, \"username\");\n\n    if (!username) return redirect('/');\n\n    if (!party.clients.find(client => client.username == username)) {\n        return json({ errorMessage: `Error: You are not a member of the Party ${party.name} anymore`, redirect: \"/\" });\n    }\n\n    return json({\n        party,\n        isHost: party.clients.find(client => client.username == username)?.isHost\n    });\n}\n\nexport default function Room() {\n    const loaderData = useLoaderData<LoaderData>();\n    const { spotify: _spotify, username: contextUsername } = useOutletContext<OutletContext>();\n    const spotify = _spotify!;\n    const fetcher = useFetcher<FetcherData>();\n    const navigate = useNavigate();\n    const [isAllowed, setIsAllowed] = useState(true);\n    const fetchDataTimeout = useRef<ReturnType<typeof setTimeout> | null>(null);\n    const [fetchInterval, setFetchInterval] = useState<ReturnType<typeof setInterval>>();\n    const [syncInterval, setSyncInterval] = useState<ReturnType<typeof setInterval>>();\n    const [{\n        title,\n        volume,\n        progressMS,\n        durationMS,\n        isPlaying,\n        recentTracks,\n        partyTracksQ,\n        searchInput,\n        searchResults,\n        clients,\n        currentDevice,\n        devices,\n        seekPos,\n        tracksQueue\n    }, setRoomData] = useReducer(\n        (oldState: RoomData, newState: Partial<RoomData>): RoomData => ({...oldState, ...newState}),\n        {\n            title: \"Loading...\",\n            volume: 99.9,\n            progressMS: 0,\n            durationMS: 0,\n            isPlaying: false,\n            recentTracks: [],\n            partyTracksQ: [],\n            searchInput: \"\",\n            searchResults: [],\n            clients: [],\n            currentDevice: null,\n            devices: [],\n            seekPos: 0,\n            tracksQueue: []\n        }\n    );\n\n    const debounceVolume: number = useDebounce(volume, 600);\n    const debounceSearch: string = useDebounce(searchInput, 600);\n    const debounceSeek: number = useDebounce(seekPos, 500);\n    if (loaderData?.party?.id) {\n        // ws = io(`ws://127.0.0.1:3100/sharify_ws/${loaderData.party.id}`);\n    }\n\n    const FetchData = useCallback((delay?: number) => {\n        if (fetchDataTimeout.current)\n            clearTimeout(fetchDataTimeout.current);\n\n        fetchDataTimeout.current = setTimeout(() => {\n            (async () => {\n                fetchDataTimeout.current = null;\n                const [playbackData, recentTracks, queueData] =\n                    await Promise.all([\n                        spotify.GetCurrentTrackData(),\n                        spotify.GetRecentlyPlayedTracks(5),\n                        spotify.GetCurrentQueueData()\n                    ]);\n        \n                if (playbackData instanceof Error) {\n                    toast.error(`Error: Failed to fetch current track (${playbackData.message})`, {\n                        position: \"bottom-right\",\n                        autoClose: 2500,\n                        hideProgressBar: false,\n                        closeOnClick: true,\n                        pauseOnHover: true,\n                        draggable: true,\n                        theme: \"light\",\n                    });\n\n                    console.error(playbackData.message);\n\n                    return;\n                }\n        \n                if (recentTracks instanceof Error) {\n                    toast.error(`Error: Failed to fetch recent tracks (${recentTracks.message})`, {\n                        position: \"bottom-right\",\n                        autoClose: 2500,\n                        hideProgressBar: false,\n                        closeOnClick: true,\n                        pauseOnHover: true,\n                        draggable: true,\n                        theme: \"light\",\n                    });\n\n                    console.error(recentTracks.message);\n\n                    return;\n                }\n        \n                if (queueData instanceof Error) {\n                    toast.error(`Error: Failed to fetch tracks in queue (${queueData.message})`, {\n                        position: \"bottom-right\",\n                        autoClose: 2500,\n                        hideProgressBar: false,\n                        closeOnClick: true,\n                        pauseOnHover: true,\n                        draggable: true,\n                        theme: \"light\",\n                    });\n\n                    console.error(queueData.message);\n\n                    return;\n                }\n\n                if (!playbackData || !playbackData.device.is_active) {\n                    const devices = await spotify.GetDevices();\n\n                    if (!(devices instanceof Error)) {\n                        setRoomData({ currentDevice: null, devices });\n                    }\n                }\n\n                if (!playbackData) {\n                    return setRoomData({\n                        title: \"Play a music on Spotify to start using Sharify\"\n                    });\n                }\n\n                const currentTrack = playbackData.item;\n                const recentArr: Array<SpotifyApi.PlayHistoryObject> = [];\n                const queueArr: Array<SpotifyApi.TrackObjectFull | SpotifyApi.EpisodeObjectFull> = [];\n\n                recentTracks.forEach(track => {\n                    if (!(track instanceof Error)) {\n                        recentArr.push(track);\n                    }\n                })\n\n                queueData.queue.forEach((track, i) => {\n                    if (i >= 5) return;\n                    queueArr.push(track);\n                })\n        \n                if (!currentTrack) return console.error(\"Couldn't fetch current track\");\n        \n                if (currentTrack.type == \"episode\") return setRoomData({\n                    title: currentTrack.name,\n                    recentTracks: recentArr,\n                    tracksQueue: queueArr,\n                    durationMS: currentTrack.duration_ms,\n                });\n\n                return setRoomData({\n                    title: `${currentTrack.name} - ${currentTrack.artists.map(artist => artist.name).join(', ')}`,\n                    recentTracks: recentArr,\n                    tracksQueue: queueArr,\n                    durationMS: currentTrack.duration_ms,\n                    progressMS: playbackData.progress_ms || 0,\n                    isPlaying: playbackData.is_playing,\n                    volume: playbackData.device.volume_percent || 50\n                });\n            })()\n        }, delay || 500);\n    }, [fetchDataTimeout, setRoomData])\n\n\n    useEffect(() => {\n        if (!isAllowed) return;\n\n        const interval = setInterval(() => fetcher.submit({\n\t\t\ttype: \"fetchData\",\n\t\t\tusername: contextUsername,\n            currentTrack: title\n\t\t}, { method: \"post\" }), 1000);\n\n        setFetchInterval(interval);\n\n        const syncInterval = setInterval(() => FetchData(0), 10000);\n\n        setSyncInterval(syncInterval);\n\n        const timeout = setTimeout(() => FetchData(0), 1000);\n\n        return () => {\n            clearTimeout(timeout);\n            clearInterval(interval);\n            clearInterval(syncInterval);\n        }\n    }, [title])\n\n    useEffect(() => {\n        if (fetcher.data) {\n            if (fetcher.data.isPartyDeleted) {\n                const _toast = toast('The party has been deleted by the host!', {\n                    position: \"bottom-right\",\n                    autoClose: 2500,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    theme: \"light\",\n                });\n\n                const timeout = setTimeout(() => navigate('/'), 3000);\n\n                setIsAllowed(false);\n\n                return () => {\n                    if (toast.isActive(_toast)) toast.dismiss(_toast);\n                    clearTimeout(timeout);\n                }\n            }\n\n            if (!fetcher.data.clients.find(client => client.username == contextUsername)) {\n                clearInterval(fetchInterval);\n                clearInterval(syncInterval);\n\n                setIsAllowed(false);\n\n                const _toast = toast('You have been kicked of the room by the host!', {\n                    position: \"bottom-right\",\n                    autoClose: 2500,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    theme: \"light\",\n                });\n                const timeout = setTimeout(() => navigate('/client'), 3000);\n\n                return () => {\n                    if (toast.isActive(_toast)) toast.dismiss(_toast);\n                    clearTimeout(timeout);\n                }\n            }\n\n            setRoomData({\n                partyTracksQ: fetcher.data.tracksQueue,\n                clients: fetcher.data.clients\n            });\n        }\n    }, [fetcher.data])\n\n    useEffect(() => {\n        if (!isPlaying) return;\n\n        const timeout = setTimeout(() => {\n            if (durationMS > 0 && progressMS >= durationMS) {\n                clearTimeout(timeout);\n                FetchData();\n                return;\n            }\n\n            setRoomData({ progressMS: progressMS + 1000 });\n        }, 1000);\n\n        return () => clearTimeout(timeout);\n    }, [progressMS, durationMS, setRoomData, isPlaying, FetchData])\n\n    useEffect(() => {\n        if (debounceVolume == 99.9) return;  // dodge initializer\n\n        spotify.SetVolume(debounceVolume);\n    }, [debounceVolume])\n\n    useEffect(() => {\n        if (debounceSearch.trim() == \"\") return;  // dodge initializer\n\n        spotify\n            .SearchTracks(debounceSearch)\n            .then(resp => {\n                if (resp instanceof Error) return console.error(resp.message)\n\n                setRoomData({ searchResults: resp.tracks?.items })\n            })\n            .catch(console.error);\n    }, [debounceSearch])\n\n    useEffect(() => {\n        if (debounceSeek == 0) return;  // dodge initializer\n\n        spotify.Seek(debounceSeek);\n    }, [debounceSeek])\n\n    useEffect(() => {\n        if (loaderData.errorMessage) {\n            const _toast = toast.error(loaderData.errorMessage, {\n                position: \"bottom-right\",\n                autoClose: 2500,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                theme: \"light\",\n            });\n\n            const timeout = setTimeout(() => navigate(loaderData.redirect || '/'), 3000);\n\n            setIsAllowed(false);\n    \n            return () => {\n                if (toast.isActive(_toast)) toast.dismiss(_toast);\n                clearTimeout(timeout);\n            }\n        }\n\n        SetStorageValue({\n            st: {\n                at: loaderData.party.spotifyCreds.accessToken,\n                rt: loaderData.party.spotifyCreds.refreshToken,\n                ein: loaderData.party.spotifyCreds.expiresIn,\n                date: loaderData.party.spotifyCreds.date\n            }\n        });\n\n        spotify.is_owner = loaderData.isHost;\n\n        if (currentDevice) return;\n\n        const spotifyDevice = GetStorageValue(\"SpotifyDevice\") as string;\n\n        if (spotifyDevice) {\n            const device = JSON.parse(spotifyDevice) as SpotifyApi.UserDevice;\n            setRoomData({ currentDevice: device });\n        } else if (spotify.current_device) {\n            setRoomData({ currentDevice: spotify.current_device });\n        } else {\n            (async () => {\n                const devices = await spotify.GetDevices();\n\n                if (devices instanceof Error) {\n                    toast.error(`Error: Failed to get devices (${devices.message})`, {\n                        position: \"bottom-right\",\n                        autoClose: 2500,\n                        hideProgressBar: false,\n                        closeOnClick: true,\n                        pauseOnHover: true,\n                        draggable: true,\n                        theme: \"light\",\n                    });\n        \n                    return;\n                }\n\n                setRoomData({ currentDevice: spotify.current_device, devices });\n            })()\n        }\n    }, [loaderData, navigate])\n\n    const addTrackToQueue = (track: SpotifyApi.TrackObjectFull) => {\n        (async () => {\n            const res = await spotify.AddNextTrack(track.external_urls.spotify);\n\n            if (!(res instanceof Error)) {\n                toast(`Added track ${track.name} - ${track.artists.map(a => a.name).join(', ')} to queue !`, {\n                    position: \"bottom-right\",\n                    autoClose: 3000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    theme: \"light\",\n                });\n            }\n    \n            fetcher.submit({\n                type: \"addToQueue\",\n                trackId: track.id,\n                trackName: `${track.name} - ${track.artists.map(artist => artist.name).join(', ')}`,\n            }, { method: \"post\" });\n\n            setRoomData({ searchResults: [] });\n        })()\n    }\n\n\n    return (\n        <>\n            <Title />\n            {isAllowed ?\n                loaderData.errorMessage ? null : (\n                    loaderData.isHost\n                        ? <HostRoom\n                            fetcher={fetcher}\n                            username={contextUsername}\n                            title={title}\n                            volume={volume}\n                            setRoomData={setRoomData}\n                            isPlaying={isPlaying}\n                            durationMS={durationMS}\n                            progressMS={progressMS}\n                            FetchData={FetchData}\n                            clients={clients}\n                            recentTracks={recentTracks}\n                            tracksQueue={tracksQueue}\n                            partyTracksQ={partyTracksQ}\n                            currentDevice={currentDevice}\n                            devices={devices}\n                            searchResults={searchResults}\n                            addTrackToQueue={addTrackToQueue}\n                        />\n                        : <ClientRoom\n                            username={contextUsername}\n                            title={title}\n                            isPlaying={isPlaying}\n                            durationMS={durationMS}\n                            progressMS={progressMS}\n                            FetchData={FetchData}\n                            recentTracks={recentTracks}\n                            tracksQueue={tracksQueue}\n                            partyTracksQ={partyTracksQ}\n                            setRoomData={setRoomData}\n                            searchResults={searchResults}\n                            addTrackToQueue={addTrackToQueue}\n                        />\n                )\n            : null}\n            <ToastContainer />\n        </>\n    );\n}\n\nexport const Icon = (props: {\n    classStr: string,\n    onClick?: React.MouseEventHandler<HTMLDivElement> | undefined,\n}) => {\n    const { classStr, onClick } = props;\n\n    return (\n        <div\n            className=\"flex text-center items-center justify-center cursor-pointer rounded-full hover:bg-main-color-hover/30 w-12 h-12\"\n            onClick={onClick}\n        >\n            <i className={`${classStr} text-2xl`}></i>\n        </div>\n    );\n}\n", "import { useState } from \"react\";\nimport { Form } from \"@remix-run/react\";\nimport type { FetcherWithComponents } from \"@remix-run/react\";\n\nimport { Icon } from \"~/routes/room.$roomID\";\nimport type { FetcherData, RoomData } from \"~/routes/room.$roomID\";\nimport spotify from \"~/utils/spotify\";\nimport { FormatTime, SetStorageValue } from \"~/utils/utils\";\nimport type { Party } from \"~/server/api.server\";\n\nexport default function HostRoom(props: {\n    fetcher: FetcherWithComponents<FetcherData>\n    username: string\n    title: string\n    volume: number\n    setRoomData: React.Dispatch<Partial<RoomData>>\n    isPlaying: boolean\n    durationMS: number\n    progressMS: number\n    FetchData: (delay?: number) => void\n    clients: Party['clients']\n    recentTracks: Array<SpotifyApi.PlayHistoryObject>\n    tracksQueue: Array<SpotifyApi.TrackObjectFull | SpotifyApi.EpisodeObjectFull>\n    partyTracksQ: Party['tracksQueue']\n    currentDevice: Party['currentDevice']\n    devices: Array<SpotifyApi.UserDevice>\n    searchResults: Array<SpotifyApi.TrackObjectFull>\n    addTrackToQueue: (track: SpotifyApi.TrackObjectFull) => void\n}) {\n    const {\n        fetcher,\n        username,\n        title,\n        volume,\n        setRoomData,\n        isPlaying,\n        durationMS,\n        progressMS,\n        FetchData,\n        clients,\n        recentTracks,\n        tracksQueue,\n        partyTracksQ,\n        currentDevice,\n        devices,\n        searchResults,\n        addTrackToQueue\n    } = props;\n    const [showVolume, setShowVolume] = useState(false);\n\n    const tracksQElements: Array<JSX.Element | null> = [];\n\n    tracksQueue.forEach((track, i) => {\n        const owner = partyTracksQ.find(trackOwner => trackOwner.trackId == track.id);\n\n        tracksQElements.push(track.type == \"episode\" ? null : (\n            <div key={i} className=\"text-lg\">\n                <span>{`[${i+1}]${owner ? ` (${owner.username})` : \"\"} ${track.name} - ${track.artists.map(a => a.name).join(', ')}`}</span>\n            </div>\n        ));\n    });\n\n    const handlePlay = () => {\n        spotify\n            .Resume()\n            .then(() => FetchData(250))\n            .catch(console.error);\n    }\n\n    const handlePause = () => {\n        spotify\n            .Pause()\n            .then(() => FetchData(250))\n            .catch(console.error);\n    }\n\n    const handleNext = () => {\n        spotify\n            .SkipToNext()\n            .then(() => FetchData(500))\n            .catch(console.error);\n    }\n\n    const handlePrevious = () => {\n        if ((durationMS - progressMS) < durationMS / 2) {\n            return spotify\n                .Seek(0)\n                .then(() => FetchData(500))\n                .catch(console.error);\n        }\n\n        spotify\n            .SkipToPrevious()\n            .then(() => FetchData(500))\n            .catch(console.error);\n    }\n\n    const handleSeek: React.ChangeEventHandler<HTMLInputElement> = e => {\n        setRoomData({ seekPos: parseInt(e.target.value) });\n        FetchData(1000);\n    }\n\n    const setSpotifyDevice = (device: SpotifyApi.UserDevice) => {\n        spotify.SetDevice(device);\n    \n        SetStorageValue({ SpotifyDevice: JSON.stringify(device) });\n    \n        fetcher.submit(\n            { type: \"setSpotifyDevice\", spotifyDevice: JSON.stringify(device) },\n            { method: 'post' }\n        );\n    }\n\n    return (\n        <>\n            <nav className=\"absolute top-0 right-10 w-2/6 h-28 z-10 flex flex-row items-center justify-end content-center\">\n                <Form method=\"post\">\n                    <input type=\"hidden\" name=\"username\" value={username} />\n                    <input type=\"hidden\" name=\"type\" value=\"deleteRoom\" />\n                    <button\n                        type=\"submit\"\n                        className=\"text-2xl rounded-3xl w-36 border-2 duration-300 border-main-color hover:border-red-700 hover:text-red-700 hover:border-4 hover:scale-105\"\n                    >\n                        {\"Delete Room\"}\n                    </button>\n                </Form>\n            </nav>\n            <section className=\"scrollsnap-page\">\n                <div className=\"flex flex-col items-center justify-center text-center w-10/12 m-auto my-28\">\n                    {!currentDevice ? (\n                        <div>\n                            <span className=\"text-2xl p-6\">Select a Device to use</span>\n                            {devices.map(device => (\n                                <button\n                                    key={device.name}\n                                    className=\"text-2xl form-input rounded-xl\"\n                                    onClick={() => setSpotifyDevice(device)}\n                                >\n                                    {`${device.name} (${device.is_active ? \"Active\" : \"Inactive\"})`}\n                                </button>\n                            ))}\n                        </div>\n                    ) : null}\n                    <span className=\"text-2xl p-6\">{title}</span>\n                    <div className=\"flex flex-col gap-5 mb-5\">\n                        <span>{FormatTime(progressMS, durationMS)}</span>\n                        <input\n                            type=\"range\"\n                            min={0}\n                            max={durationMS}\n                            defaultValue={progressMS}\n                            className=\"accent-indigo-700\"\n                            draggable={false}\n                            onChange={handleSeek}\n                        />\n                    </div>\n                    <div className=\"scrollsnap-start-component flex flex-row items-center justify-center gap-x-10 py-6 border-y-[1px] border-main-color-hover w-full\">\n                        <Icon classStr=\"fa-solid fa-backward-step\" onClick={handlePrevious} />\n                        {\n                            isPlaying\n                                ? <Icon classStr=\"fa-solid fa-pause\" onClick={handlePause} />\n                                : <Icon classStr=\"fa-solid fa-play\" onClick={handlePlay} />\n                        }\n                        <Icon classStr=\"fa-solid fa-forward-step\" onClick={handleNext} />\n                        {volume >= 50 ? (\n                            <Icon onClick={() => setShowVolume(v => !v)} classStr=\"fa-solid fa-volume-high\" />\n                        ) : null}\n                        {volume < 50 && volume > 0 ? (\n                            <Icon onClick={() => setShowVolume(v => !v)} classStr=\"fa-solid fa-volume-low\" />\n                            ) : null}\n                        {volume == 0 ? (\n                            <Icon onClick={() => setShowVolume(v => !v)} classStr=\"fa-solid fa-volume-xmark\" />\n                        ) : null}\n                        {showVolume ? (\n                            <div className=\"flex flex-col text-center items-center justify-center\">\n                                <span className=\"text-xl\">{volume} %</span>\n                                <input\n                                    type=\"range\"\n                                    min={0}\n                                    max={100}\n                                    value={volume}\n                                    className=\"accent-main-color\"\n                                    onChange={e => setRoomData({ volume: parseInt(e.currentTarget.value) })}\n                                />\n                            </div>\n                        ) : null}\n                    </div>\n                    <div className=\"scrollsnap-start-component flex flex-row w-full\">\n                        <div className=\"flex flex-col flex-wrap h-80 w-full\">\n                            <span className=\"text-2xl\">Party members:</span>\n                            {clients.map(client => (\n                                <div className=\"flex flex-row flex-wrap gap-3 justify-center items-center max-w-[50%]\" key={client.username}>\n                                    <span className={`input-form text-3xl ${client.isHost ? \"text-main-color\" : \"text-indigo-700\"}`}>\n                                        {client.username}\n                                    </span>\n                                    {!client.isHost ? (\n                                        <>\n                                            <Form method=\"post\">\n                                                <input type=\"hidden\" name=\"username\" value={client.username} />\n                                                <input type=\"hidden\" name=\"type\" value=\"kick\" />\n                                                <button type=\"submit\">Kick</button>\n                                            </Form>\n                                            <Form method=\"post\">\n                                                <input type=\"hidden\" name=\"username\" value={client.username} />\n                                                <input type=\"hidden\" name=\"type\" value=\"ban\" />\n                                                <button type=\"submit\">Ban</button>\n                                            </Form>\n                                        </>\n                                    ) : null}\n                                </div>\n                            ))}\n                        </div>\n                        <div className=\"flex flex-row justify-center items-center content-center text-center w-full gap-5 pb-5\">\n                            <div className=\"w-full flex flex-col gap-2\">\n                                <span className=\"text-2xl\">Coming next:</span>\n                                {tracksQElements.map(el => el)}\n                            </div>\n                            <div className=\"w-full flex flex-col gap-2\">\n                                <span className=\"text-2xl\">Previously played:</span>\n                                {recentTracks.map((trackData, i) => (\n                                    <div key={i} className=\"text-lg\">\n                                        <span>\n                                            {`[${i+1}] ${trackData.track.name} - ${trackData.track.artists.map(a => a.name).join(', ')}`}\n                                        </span>\n                                    </div>\n                                ))}\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"scrollsnap-end-component flex flex-col items-center justify-center content-center gap-2 border-t-[1px] border-main-color-hover w-full h-56\">\n                        <span className=\"text-2xl\">Search a song to add to the queue:</span>\n                        <input\n                            className=\"rounded-lg outline-none\"\n                            type=\"text\"\n                            name=\"searchBar\"\n                            onChange={e => setRoomData({ searchInput: e.target.value })}\n                        />\n                        <div className=\"flex flex-row flex-wrap gap-5 justify-center overflow-y-scroll\">\n                            {searchResults.map(track => (\n                                <button\n                                    key={track.id}\n                                    className=\"border-[1px] border-[white] rounded-xl text-lg p-1 mt-4 hover:scale-105\"\n                                    onClick={() => addTrackToQueue(track)}\n                                >\n                                    {`${track.name} - ${track.artists.map(a => a.name).join(', ')}`}\n                                </button>\n                            ))}\n                        </div>\n                    </div>\n                </div>\n            </section>\n        </>\n    );\n}\n", "import { Form } from \"@remix-run/react\";\n\nimport { FormatTime } from \"~/utils/utils\";\nimport type { RoomData } from \"~/routes/room.$roomID\";\nimport type { Party } from \"~/server/api.server\";\n\nexport default function ClientRoom(props: {\n    username: string\n    title: string\n    isPlaying: boolean\n    durationMS: number\n    progressMS: number\n    FetchData: () => void\n    recentTracks: Array<SpotifyApi.PlayHistoryObject>\n    tracksQueue: Array<SpotifyApi.TrackObjectFull | SpotifyApi.EpisodeObjectFull>\n    partyTracksQ: Party['tracksQueue']\n    setRoomData: React.Dispatch<Partial<RoomData>>\n    searchResults: Array<SpotifyApi.TrackObjectFull>\n    addTrackToQueue: (track: SpotifyApi.TrackObjectFull) => void\n}) {\n    const {\n        username,\n        title,\n        durationMS,\n        progressMS,\n        recentTracks,\n        tracksQueue,\n        partyTracksQ,\n        setRoomData,\n        searchResults,\n        addTrackToQueue\n    } = props;\n\n    const tracksQElements: Array<JSX.Element | null> = [];\n\n    tracksQueue.forEach((track, i) => {\n        const owner = partyTracksQ.find(trackOwner => trackOwner.trackId == track.id);\n\n        tracksQElements.push(track.type == \"episode\" ? null : (\n            <div key={i} className=\"text-lg\">\n                <span>{`[${i+1}]${owner ? ` (${owner.username})` : \"\"} ${track.name} - ${track.artists.map(a => a.name).join(', ')}`}</span>\n            </div>\n        ));\n    });\n\n    return (\n        <>\n            <nav className=\"absolute top-0 right-10 w-2/6 h-28 z-10 flex flex-row items-center justify-end content-center\">\n                <Form method=\"post\">\n                    <input type=\"hidden\" name=\"username\" value={username} />\n                    <input type=\"hidden\" name=\"type\" value=\"leaveRoom\" />\n                    <button\n                        type=\"submit\"\n                        className=\"text-2xl rounded-3xl w-36 border-2 duration-300 border-main-color hover:border-red-700 hover:text-red-700 hover:border-4 hover:scale-105\"\n                    >\n                        {\"Leave Room\"}\n                    </button>\n                </Form>\n            </nav>\n            <section className=\"scrollsnap-page\">\n                <div className=\"flex flex-col items-center justify-center text-center w-10/12 m-auto my-28\">\n                    <span className=\"text-2xl p-6\">{title}</span>\n                    <div className=\"flex flex-col gap-5 mb-5\">\n                        <span>{FormatTime(progressMS, durationMS)}</span>\n                        <input\n                            type=\"range\"\n                            min={0}\n                            max={durationMS}\n                            defaultValue={progressMS}\n                            className=\"accent-indigo-700\"\n                            draggable={false}\n                            onChange={e => e.target.value = String(progressMS)}\n                        />\n                    </div>\n                    <div className=\"scrollsnap-end-component flex flex-row items-center justify-center gap-x-10 py-6 border-t-[1px] border-main-color-hover w-full\">\n                        <div className=\"flex flex-col items-center justify-center content-center gap-2 w-full h-56 overflow-x-hidden\">\n                            <span className=\"text-2xl\">Search a song to add to the queue:</span>\n                            <input\n                                className=\"rounded-lg outline-none\"\n                                type=\"text\"\n                                name=\"searchBar\"\n                                onChange={e => setRoomData({ searchInput: e.target.value })}\n                            />\n                            <div className=\"flex flex-row flex-wrap gap-2 justify-center overflow-y-scroll\">\n                                {searchResults.map(track => (\n                                    <button\n                                        key={track.id}\n                                        className=\"border-[1px] border-[white] rounded-xl text-lg p-1 m-4 hover:scale-105\"\n                                        onClick={() => addTrackToQueue(track)}\n                                    >\n                                        {`${track.name} - ${track.artists.map(a => a.name).join(', ')}`}\n                                    </button>\n                                ))}\n                            </div>\n                        </div>\n                        <div className=\"flex flex-row justify-center items-center content-center text-center w-full gap-5 pb-5\">\n                            <div className=\"w-full flex flex-col gap-2\">\n                                <span className=\"text-2xl\">Coming next:</span>\n                                {tracksQElements.map(el => el)}\n                            </div>\n                            <div className=\"w-full flex flex-col gap-2\">\n                                <span className=\"text-2xl\">Previously played:</span>\n                                {recentTracks.map((trackData, i) => (\n                                    <div key={i} className=\"text-lg\">\n                                        <span>\n                                            {`[${i+1}] ${trackData.track.name} - ${trackData.track.artists.map(a => a.name).join(', ')}`}\n                                        </span>\n                                    </div>\n                                ))}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        </>\n    );\n}\n", "import { toast, ToastContainer } from \"react-toastify\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { json, redirect } from \"@remix-run/node\";\nimport type { LoaderFunction, ActionFunction } from \"@remix-run/node\";\nimport { Form, useActionData, useLoaderData, useOutletContext, useSubmit } from \"@remix-run/react\";\n\nimport Title from \"~/components/title\";\nimport type { Party } from \"~/server/api.server\";\nimport { api } from \"~/server/handlers.server\";\nimport Spotify from \"~/app/utils/spotify\";\nimport { getSessionData, setSessionData, unsetSessionData } from \"~/server/session.server\";\nimport type { OutletContext } from \"~/root\";\n\ntype ActionData = {\n    errorMessage: string\n}\n\ntype LoaderData = {\n    parties: Array<Party>\n}\n\nexport const action: ActionFunction = async ({\n    request\n}) => {\n    const formData = await request.formData();\n\tconst deleteSTokens = formData.get('DeleteSpotifyTokens') as string || false;\n\n\tif (deleteSTokens) {\n\t\tawait unsetSessionData(request, \"SpotifyTokens\", \"/\");\n\t}\n\n    const username = formData.get(\"username\") as string;\n    const partyID = formData.get(\"partyID\") as string;\n    const password = formData.get(\"partyPwd\") as string;\n\n    if (!partyID) {\n        throw new Error(\"Party ID not found, please contact Snoupix\");\n    }\n\n    const party = api.GetParty(parseInt(partyID));\n\n    if (!username) {\n        throw new Error(\"Username not found, please contact Snoupix\");\n    }\n\n    if (!party) {\n        return json({ errorMessage: `Party id ${partyID} doesn't exist anymore.` });\n    }\n\n    if (party.isPrivate && party.password != password) {\n        return json({ errorMessage: `Error: Party password incorrect` });\n    }\n\n    if (api.UsernameExists(username)) {\n        return json({ errorMessage: `Error: There is already a Sharify member called \"${username}\"` });\n    }\n\n    const error = api.JoinParty(parseInt(partyID), username);\n\n    if (error) {\n        return json({ errorMessage: error.message });\n    }\n    \n    return await setSessionData(request, \"username\", username, `/room/${partyID}`);\n}\n\nexport const loader: LoaderFunction = async ({\n    request\n}) => {\n    const username = await getSessionData(request, \"username\");\n\n\tif (username) {\n        const party = api.GetUserParty(username);\n    \n        if (party != null) {\n            return redirect(`/room/${party.id}`);\n        }\n\t}\n\n    const parties = api.GetParties(false);\n\n    return json({ parties });\n}\n\nexport default function Client() {\n    const loaderData = useLoaderData<LoaderData>();\n    const actionData = useActionData<ActionData>();\n    const context = useOutletContext<OutletContext>();\n    const submit = useSubmit();\n    const [parties, setParties] = useState<Array<Party>>([]);\n    const [showUP, setShowUP] = useState(false); // username popup\n    const [showPP, setShowPP] = useState(false); // password popup\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [partyData, setPartyData] = useState<{\n        id: number\n        isPrivate: boolean\n    } | null>(null);\n\n    useEffect(() => {\n        if (loaderData.parties) {\n            setParties(loaderData.parties.filter(\n                party => !party.bannedClients.includes(context.username)\n            ));\n        }\n\n        if (Spotify.isReady && !Spotify.isOwner) {\n            submit({ DeleteSpotifyTokens: \"true\" }, { method: \"post\" });\n        }\n\n        setUsername(context.username);\n    }, [loaderData])\n\n    useEffect(() => {\n        if (actionData && actionData.errorMessage) {\n            const _toast = toast.error(actionData.errorMessage, {\n                position: \"bottom-right\",\n                autoClose: 2500,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                theme: \"dark\",\n            });\n\n            setUsername(\"\");\n            setPassword(\"\");\n    \n            return () => toast.isActive(_toast) ? toast.dismiss(_toast) : undefined;\n        }\n    }, [actionData])\n\n    useEffect(() => {\n        if (\n            !showUP && !showPP && partyData != null &&\n            (username.trim() != \"\" || password != \"\")\n        ) {\n            handleJoin(partyData.id, partyData.isPrivate);\n        }\n    }, [showUP, showPP])\n\n    const handleJoin = (id: number, isPrivate: boolean) => {\n        setPartyData({ id, isPrivate });\n\n        if (!username || username.trim() == \"\") {\n            setShowUP(true);\n            return\n        }\n\n        if (isPrivate && password == \"\") {\n            setShowPP(true);\n            return\n        }\n\n        submit(\n            {\n                username,\n                partyID: String(id),\n                partyPwd: password\n            },\n            { method: \"post\" }\n        );\n    }\n\n    return (\n        <>\n            <Title />\n            <section className=\"h-screen\">\n                <div data-cy=\"div-rooms-array\" className=\"relative m-auto mt-28 w-3/5 h-3/5 flex flex-col overflow-y-scroll border-[1px] border-main-color-hover rounded-lg shadow-around\">\n                    {parties && parties.length > 0 ? parties.map(party => (\n                        <Form\n                            data-cy=\"client-form-room\"\n                            onClick={() => handleJoin(party.id, party.isPrivate)}\n                            key={party.id}\n                            className={\"cursor-pointer flex flex-row justify-center text-2xl py-4 border-b-[1px] duration-300 hover:text-slate-400\" + (\n                                party.id % 2 == 0 ? \" text-indigo-600\" : \"\"\n                            )}\n                        >\n                            {`[${party.id}] ${party.name} | ${party.clients.length}/${party.MAX_CLIENTS} | `}\n                            {party.type == \"Spotify\" ? <i className=\"fab fa-spotify pl-2.5 pr-1 mt-1 text-[currentColor]\"></i> : <i className=\"fab fa-youtube pl-2.5 pr-1 mt-1 text-[currentColor]\"></i>}\n                            {party.isPrivate ? ' | ' : ''}\n                            {party.isPrivate ? <i className=\"fas fa-lock pl-2.5 mt-[.15rem] text-[currentColor]\"></i> : ''}\n                        </Form>\n                    )) : null}\n                    {loaderData && loaderData.parties && loaderData.parties.length == 0 ? (\n                        <span className=\"text-center text-3xl m-auto\">No parties found</span>\n                    ) : null}\n                    <PasswordPopup\n                        display={showPP}\n                        setDisplay={setShowPP}\n                        setPassword={setPassword}\n                    />\n                    <UsernamePopup\n                        display={showUP}\n                        setDisplay={setShowUP}\n                        username={username}\n                        setUsername={setUsername}\n                    />\n                </div>\n            </section>\n            <ToastContainer />\n        </>\n    );\n}\n\nconst UsernamePopup = (\n    props: {\n        display: boolean\n        setDisplay: React.Dispatch<React.SetStateAction<boolean>>\n        username: string\n        setUsername: React.Dispatch<React.SetStateAction<string>>\n    }\n) => {\n    const { display, setDisplay, username, setUsername } = props;\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    if (display) {\n        setTimeout(() => inputRef.current?.focus(), 500);\n    }\n\n    return (\n        <div className={`absolute top-0 left-0 h-full w-[100%] flex-col justify-center items-center gap-5 backdrop-blur-sm duration-300 ${display ? \"flex\" : \"hidden\"}`}>\n            <span className=\"text-center text-3xl\">First of all, you need to register your username</span>\n            <input\n                data-cy=\"client-username\"\n                ref={inputRef}\n                type=\"text\"\n                className=\"form-input\"\n                placeholder=\"Username\"\n                defaultValue={username}\n                onChange={e => setUsername(e.target.value)}\n            />\n            <button data-cy=\"client-username-submit\" className=\"text-2xl\" onClick={() => setDisplay(false)}>Close</button>\n        </div>\n    );\n}\n\nconst PasswordPopup = (\n    props: {\n        display: boolean\n        setDisplay: React.Dispatch<React.SetStateAction<boolean>>\n        setPassword: React.Dispatch<React.SetStateAction<string>>\n    }\n) => {\n    const { display, setDisplay, setPassword } = props;\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    if (display) {\n        setTimeout(() => inputRef.current?.focus(), 500);\n    }\n\n    return (\n        <div className={`absolute top-0 left-0 h-full w-[100%] flex-col justify-center items-center gap-5 backdrop-blur-sm duration-300 ${display ? \"flex\" : \"hidden\"}`}>\n            <span className=\"text-center text-3xl\">Type the correct Party password</span>\n            <input\n                data-cy=\"client-party-password\"\n                ref={inputRef}\n                type=\"password\"\n                className=\"form-input w-full\"\n                placeholder=\"Party password\"\n                onChange={e => setPassword(e.currentTarget.value)}\n            />\n            <button data-cy=\"client-party-password-submit\" className=\"text-2xl\" onClick={() => setDisplay(false)}>Close</button>\n        </div>\n    );\n}\n", "import { useEffect, useState } from \"react\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport type { ActionFunction } from \"@remix-run/node\";\nimport { Link, useOutletContext, useSubmit } from \"@remix-run/react\";\nimport type { UserProfile } from \"@spotify/web-api-ts-sdk\";\n\nimport type { OutletContext } from \"~/root\";\nimport Title from \"~/components/title\";\nimport Spotify from \"~/utils/spotify\";\nimport { unsetSessionData } from \"~/server/session.server\";\nimport { GetStorageValue } from \"~/utils/utils\";\n\nexport const action: ActionFunction = async ({\n\trequest\n}) => {\n\tconst formData = await request.formData();\n\tconst deleteSTokens = formData.get('DeleteSpotifyTokens') as string || false;\n\n\tif (deleteSTokens) {\n\t\treturn await unsetSessionData(request, \"SpotifyTokens\", \"/\");\n\t}\n\t\n\treturn null;\n}\n\nexport default function Index() {\n    const { spotify } = useOutletContext<OutletContext>();\n\tconst submit = useSubmit();\n\tconst [spotifyUser, setSpotifyUser] = useState<UserProfile | null>(null);\n\n\tuseEffect(() => {\n        if (!spotify) return;\n\n\t\tif (spotify.is_ready) {\n\t\t\t(async () => {\n\t\t\t\tconst profile = await spotify.GetProfile();\n\n\t\t\t\tif (!(profile instanceof Error)) {\n\t\t\t\t\tsetSpotifyUser(profile);\n\t\t\t\t}\n\t\t\t})()\n\t\t} else if (GetStorageValue(\"st\") != null && !spotify.is_ready) {\n\t\t\t(async () => {\n\t\t\t\tconst profile = await spotify.GetProfile();\n\n\t\t\t\tif (!(profile instanceof Error)) {\n\t\t\t\t\tsetSpotifyUser(profile);\n\t\t\t\t}\n\t\t\t})()\n\t\t}\n\t}, [spotify])\n\n\tconst handleSpotifyDisconnect = () => {\n\t\ttoast(`[Spotify] Disconnected from ${spotifyUser?.display_name} !`, {\n\t\t\tposition: \"bottom-right\",\n\t\t\tautoClose: 2500,\n\t\t\thideProgressBar: false,\n\t\t\tcloseOnClick: true,\n\t\t\tpauseOnHover: true,\n\t\t\tdraggable: true,\n\t\t\ttheme: \"light\",\n\t\t});\n\t\t\n\t\tsubmit({ DeleteSpotifyTokens: \"true\" }, { method: \"post\" });\n\n\t\tSpotify.Disconnect();\n\t\tsetSpotifyUser(null);\n\t}\n\t\n\treturn (\n\t\t<>\n\t\t\t<nav className=\"fixed top-0 left-0 h-14 w-screen\">\n\n\t\t\t</nav>\n\t\t\t<div className=\"h-screen flex flex-col justify-center items-center content-center gap-y-4 md:gap-y-6 xl:gap-y-9\">\n\t\t\t\t<Title />\n\t\t\t\t<Link\n\t\t\t\t\tclassName=\"duration-300 p-main-btn md:t-main-btn xl:main-btn hover:shadow-around hover:shadow-main-color hover:border-bg-color\"\n\t\t\t\t\tto=\"/host\"\n\t\t\t\t\tdata-cy=\"host-link\"\n\t\t\t\t>\n\t\t\t\t\tHost\n\t\t\t\t</Link>\n\t\t\t\t<Link\n\t\t\t\t\tclassName=\"duration-300 p-main-btn md:t-main-btn xl:main-btn hover:shadow-around hover:shadow-main-color hover:border-bg-color\"\n\t\t\t\t\tto=\"/client\"\n\t\t\t\t\tdata-cy=\"client-link\"\n\t\t\t\t>\n\t\t\t\t\tClient\n\t\t\t\t</Link>\n\t\t\t\t{spotifyUser ? (\n\t\t\t\t\t<div data-cy=\"horizontal-bar\" className=\"border-t-[1px] border-indigo-700 w-[20%]\"></div>\n\t\t\t\t) : null}\n\t\t\t\t{spotifyUser ? (\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"duration-300 p-main-btn md:t-main-btn xl:main-btn hover:shadow-around hover:shadow-main-color hover:border-bg-color\"\n\t\t\t\t\t\tonClick={handleSpotifyDisconnect}\n\t\t\t\t\t\tdata-cy=\"disconnect-btn\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<span className=\"text-xl xl:text-2xl\">{`Disconnect from ${spotifyUser.display_name}`}</span>\n\t\t\t\t\t</button>\n\t\t\t\t) : null}\n\t\t\t</div>\n\t\t\t<ToastContainer />\n\t\t</>\n\t);\n}\n", "import { toast, ToastContainer } from \"react-toastify\";\nimport type { Id } from \"react-toastify\";\nimport type { ActionFunction, LoaderFunction } from \"@remix-run/node\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, useActionData, useCatch, useLoaderData, useNavigate, useOutletContext, useParams, useSubmit } from \"@remix-run/react\";\nimport { useEffect, useReducer, useRef, useState } from \"react\";\n\nimport Title from \"~/components/title\";\nimport { api } from \"~/server/handlers.server\";\nimport type { Party } from \"~/server/api.server\";\nimport { PartyError } from \"~/server/api.server\";\nimport { getSessionData, setSessionData } from \"~/server/session.server\";\nimport type { OutletContext } from \"~/root\";\nimport { GetStorageValue } from \"~/utils/utils\";\n\ntype LoaderData = {\n\tspotifyTokens: {\n\t\tsat: string\n\t\tsrt: string\n\t\tein: number\n\t\tdate: number\n\t}\n}\n\ntype ActionData = {\n\terrorMessage: string | undefined\n}\n\ntype FormData = {\n\tusername: \tstring\n\tname: \t\tParty['name']\n\tisPrivate: \tParty['isPrivate']\n\tpassword: \tstring\n\ttype: \t\tParty['type'] | null\n\tsat: \t\tstring\n\tsrt: \t\tstring\n\tsd: \t\tnumber\n\tsdate: \t\tnumber\n}\n\ntype ConnectedType = {\n\tspotify: boolean\n}\n\nexport const action: ActionFunction = async ({\n\trequest\n}) => {\n\tconst formData = await request.formData();\n\tconst _data = formData.get('data') as string;\n\n\tif (!_data) return json({ errorMessage: \"Error: Cannot retrieve data, please, contact Snoupix\" });\n\n\tconst data: FormData = JSON.parse(_data);\n\n\tconst party = api.CreateParty(\n\t\t[{\n\t\t\tisHost: true,\n\t\t\tusername: data.username\n\t\t}],\n\t\tdata.name,\n\t\tdata.isPrivate,\n\t\tdata.type || \"Spotify\",\n\t\t{\n\t\t\taccessToken: data.sat,\n\t\t\trefreshToken: data.srt,\n\t\t\texpiresIn: data.sd,\n\t\t\tdate: data.sdate\n\t\t},\n\t\tdata.isPrivate ? data.password : undefined\n\t);\n\n\tif (party instanceof PartyError) {\n\t\tthrow new Response(party.message, { status: 404 });\n\t}\n\n\treturn await setSessionData(request, \"username\", data.username, `/room/${party.id}`);\n}\n\nexport const loader: LoaderFunction = async ({\n\trequest\n}) => {\n\tconst username = await getSessionData(request, \"username\");\n\tconst sTokens = await getSessionData(request, \"SpotifyTokens\");\n\n\tif (username) {\n\t\tconst party = api.GetUserParty(username);\n\n\t\tif (party) {\n\t\t\treturn redirect(`/room/${party.id}`);\n\t\t}\n\t}\n\n\tif (sTokens) {\n\t\treturn json({ spotifyTokens: JSON.parse(sTokens) });\n\t}\n\n\treturn null;\n}\n\nexport default function Host() {\n\tconst loaderData = useLoaderData<LoaderData>();\n\tconst actionData = useActionData<ActionData>();\n\tconst { spotify, username: contextUsername } = useOutletContext<OutletContext>();\n\tconst submit = useSubmit();\n\tconst navigate = useNavigate();\n\tconst formRef = useRef<HTMLFormElement>(null);\n\tconst [connectedTo, setConnectedTo] = useState<ConnectedType>({ spotify: false });\n\tconst [dataToSend, setDataToSend] = useState(\"\");\n\tconst [formState, setFormState] = useReducer(\n\t\t(state: FormData, newState: Partial<FormData>) => {\n\t\t\tsetDataToSend(JSON.stringify({ ...state, ...newState }))\n\t\t\treturn { ...state, ...newState }\n\t\t},\n\t\t{\n\t\t\tusername: \"\",\n\t\t\tname: \"\",\n\t\t\tisPrivate: false,\n\t\t\tpassword: \"\",\n\t\t\ttype: null,\n\t\t\tsat: \"\",\n\t\t\tsrt: \"\",\n\t\t\tsd: 0,\n\t\t\tsdate: 0\n\t\t}\n\t);\n\n\tuseEffect(() => {\n\t\tlet toast_id: Id;\n\n        console.log(spotify);\n        if (!spotify) return;\n        console.log(spotify);\n\n\t\tif (spotify.is_ready) {\n\t\t\t(async () => {\n\t\t\t\tconst profile = await spotify.GetProfile();\n\n\t\t\t\tif (!(profile instanceof Error)) {\n\t\t\t\t\ttoast_id = toast(`[Spotify] Connected as ${profile.display_name}`, {\n\t\t\t\t\t\tposition: \"bottom-right\",\n\t\t\t\t\t\tautoClose: 2500,\n\t\t\t\t\t\thideProgressBar: false,\n\t\t\t\t\t\tcloseOnClick: true,\n\t\t\t\t\t\tpauseOnHover: true,\n\t\t\t\t\t\tdraggable: true,\n\t\t\t\t\t\ttheme: \"light\",\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tsetFormState({\n\t\t\t\t\tsat: loaderData.spotifyTokens.sat,\n\t\t\t\t\tsrt: loaderData.spotifyTokens.srt,\n\t\t\t\t\tsd: loaderData.spotifyTokens.ein,\n\t\t\t\t\tsdate: loaderData.spotifyTokens.date,\n\t\t\t\t\tusername: contextUsername,\n                    name: `${contextUsername}'s party`,\n\t\t\t\t\ttype: \"Spotify\",\n\t\t\t\t});\n\t\n\t\t\t\tsetConnectedTo(prev => ({ ...prev, spotify: true }));\n\t\t\t})()\n\t\t} else if (GetStorageValue(\"st\") != null && !spotify.is_ready) {\n\t\t\t(async () => {\n\t\t\t\tconst profile = await spotify.GetProfile();\n\n\t\t\t\tif (!(profile instanceof Error)) {\n\t\t\t\t\ttoast_id = toast(`[Spotify] Connected as ${profile.display_name}`, {\n\t\t\t\t\t\tposition: \"bottom-right\",\n\t\t\t\t\t\tautoClose: 2500,\n\t\t\t\t\t\thideProgressBar: false,\n\t\t\t\t\t\tcloseOnClick: true,\n\t\t\t\t\t\tpauseOnHover: true,\n\t\t\t\t\t\tdraggable: true,\n\t\t\t\t\t\ttheme: \"light\",\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tsetFormState({\n\t\t\t\t\tsat: loaderData.spotifyTokens.sat,\n\t\t\t\t\tsrt: loaderData.spotifyTokens.srt,\n\t\t\t\t\tsd: loaderData.spotifyTokens.ein,\n\t\t\t\t\tsdate: loaderData.spotifyTokens.date,\n\t\t\t\t\tusername: contextUsername,\n                    name: `${contextUsername}'s party`,\n\t\t\t\t\ttype: \"Spotify\",\n\t\t\t\t});\n\t\n\t\t\t\tsetConnectedTo(prev => ({ ...prev, spotify: true }));\n\t\t\t})()\n\t\t}\n\n\t\treturn () => toast.dismiss(toast_id);\n\t}, [spotify])\n\n\tuseEffect(() => {\n\t\tif (actionData?.errorMessage) {\n\t\t\tconst _toast = toast.error(actionData.errorMessage, {\n\t\t\t\tposition: \"bottom-right\",\n\t\t\t\tautoClose: 2500,\n\t\t\t\thideProgressBar: false,\n\t\t\t\tcloseOnClick: true,\n\t\t\t\tpauseOnHover: true,\n\t\t\t\tdraggable: true,\n\t\t\t\ttheme: \"dark\",\n\t\t\t});\n\n\t\t\treturn () => toast.isActive(_toast) ? toast.dismiss(_toast) : undefined;\n\t\t}\n\t}, [actionData])\n\t\n\tconst checkFormInputs = (): boolean => {\n\t\tif (\n\t\t\tformState.name == \"\" ||\n\t\t\tformState.type == null ||\n\t\t\t(formState.isPrivate && formState.password == \"\") ||\n\t\t\tformState.username.trim() == \"\"\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t\n\t\treturn true;\n\t}\n\n\tconst handleSubmit = () => {\t\n\t\tif (checkFormInputs() && formRef.current) {\n\t\t\tsubmit(formRef.current, { method: \"post\" });\n\t\t} else {\n\t\t\ttoast.error(\"Error: Missing fields\", {\n\t\t\t\tposition: \"bottom-right\",\n\t\t\t\tautoClose: 2500,\n\t\t\t\thideProgressBar: false,\n\t\t\t\tcloseOnClick: true,\n\t\t\t\tpauseOnHover: true,\n\t\t\t\tdraggable: true,\n\t\t\t\ttheme: \"dark\",\n\t\t\t});\n\t\t}\n\t}\n\n\treturn (\n\t\t<section className=\"h-screen\">\n\t\t\t<Title />\n\t\t\t<Form\n\t\t\t\tref={formRef}\n\t\t\t\tclassName=\"flex flex-col justify-center items-center content-center h-full gap-y-6\"\n\t\t\t\tonSubmit={e => e.preventDefault()}\n\t\t\t>\n\t\t\t\t{\n\t\t\t\t\tformState.type == null ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<span className=\"text-2xl\">Party type</span>\n\t\t\t\t\t\t\t<div className=\"flex flex-row gap-x-4\">\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclassName={'text-xl px-5 py-2 rounded-3xl bg-bg-color text-main-color border-[1px] border-main-color transition-all duration-300 ' + (formState.type == 'Spotify' ? 'text-[white] shadow-backRight shadow-main-color scale-105' : '')}\n\t\t\t\t\t\t\t\t\tonClick={() => connectedTo.spotify ? setFormState({ type: 'Spotify' }) : navigate('/auth_spotify')}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{\"Connect to Spotify\"}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<div className=\"flex flex-row\">\n\t\t\t\t\t\t\t\t{formState.type == \"Spotify\" ? <i className=\"fab fa-spotify text-3xl text-[currentColor]\"></i> : <i className=\"fab fa-youtube text-3xl text-[currentColor]\"></i>}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<input type=\"hidden\" name=\"srt\" value={formState.srt} />\n\t\t\t\t\t\t\t<input type=\"hidden\" name=\"sat\" value={formState.sat} />\n\t\t\t\t\t\t\t<input type=\"hidden\" name=\"data\" value={dataToSend} />\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tdata-cy=\"host-form-username\"\n\t\t\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\t\t\tclassName=\"form-input\"\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tmaxLength={20}\n\t\t\t\t\t\t\t\tplaceholder=\"Username\"\n\t\t\t\t\t\t\t\tspellCheck={false}\n\t\t\t\t\t\t\t\tdefaultValue={formState.username}\n\t\t\t\t\t\t\t\tonChange={e => setFormState({\n                                    username: e.currentTarget.value == \"\" ? 'Guest' : e.currentTarget.value,\n                                    name: `${e.currentTarget.value}'s party`\n                                })}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tdata-cy=\"host-form-party-name\"\n\t\t\t\t\t\t\t\tclassName=\"form-input\"\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tmaxLength={20}\n\t\t\t\t\t\t\t\tplaceholder=\"Party's name\"\n\t\t\t\t\t\t\t\tspellCheck={false}\n                                value={formState.name}\n\t\t\t\t\t\t\t\tonChange={e => setFormState({ name: e.currentTarget.value })}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<span className=\"text-2xl\">Is the party private ?</span>\n\t\t\t\t\t\t\t<div className=\"flex flex-row gap-x-4\">\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tdata-cy=\"host-form-make-private\"\n\t\t\t\t\t\t\t\t\tclassName={'text-xl px-5 py-2 rounded-3xl bg-bg-color text-main-color border-[1px] border-main-color transition-all duration-300 ' + (formState.isPrivate ? 'text-[white] shadow-around shadow-main-color scale-105' : '')}\n\t\t\t\t\t\t\t\t\tonClick={() => !formState.isPrivate ? setFormState({ isPrivate: true, password: \"\" }) : null}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tYes\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tdata-cy=\"host-form-make-public\"\n\t\t\t\t\t\t\t\t\tclassName={'text-xl px-5 py-2 rounded-3xl bg-bg-color text-main-color border-[1px] border-main-color transition-all duration-300 ' + (!formState.isPrivate ? 'text-[white] shadow-inner shadow-main-color scale-105' : '')}\n\t\t\t\t\t\t\t\t\tonClick={() => formState.isPrivate ? setFormState({ isPrivate: false, password: \"\" }) : null}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tNo\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tdata-cy=\"host-form-party-password\"\n\t\t\t\t\t\t\t\tclassName={formState.isPrivate ? \"form-input block\" : \"hidden\"}\n\t\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\t\t\tplaceholder=\"Password\"\n\t\t\t\t\t\t\t\tonChange={e => setFormState({ password: e.currentTarget.value })}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tdata-cy=\"host-form-submit\"\n\t\t\t\t\t\t\t\tclassName=\"form-input mt-4 text-lg md:text-xl xl:text-2xl rounded-lg border-[1px] px-5 py-3 border-main-color hover:shadow-around text-shadow\"\n\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\tonClick={handleSubmit}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{\"Create your party\"}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t  \t</Form>\n\t\t\t<ToastContainer />\n\t\t</section>\n\t);\n}\n\nexport function ErrorBoundary() {\n\treturn (\n\t\t<div className=\"error-container\">\n\t\t\t{`An error has occured while creating a party.`}\n\t\t</div>\n\t);\n}\n\nexport function CatchBoundary() {\n\tconst caught = useCatch();\n\tconst params = useParams();\n\n\tif (caught.status === 404) {\n\t\treturn (\n\t\t\t<div className=\"error-container\">\n\t\t\t\t{`[${caught.status}] ${caught.data} (${params.roomID})`}\n\t\t\t</div>\n\t\t);\n\t}\n\n\tthrow new Error(`Unhandled error: ${caught.status} ${caught.data} ${params.roomID}`);\n}\n", "export default {'entry':{'module':'/build/entry.client-6EHI2XZS.js','imports':['/build/_shared/chunk-ABQ3UCFU.js','/build/_shared/chunk-QJIVJGGC.js','/build/_shared/chunk-EDQRRRFQ.js','/build/_shared/chunk-3PUPADQ7.js','/build/_shared/chunk-MS7JXHIA.js','/build/_shared/chunk-4LC45B2F.js','/build/_shared/chunk-J7D7NKIA.js','/build/_shared/chunk-RODUX5XG.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-JAE4VZ5R.js','imports':['/build/_shared/chunk-FV3MF4NF.js','/build/_shared/chunk-TMJLOEVS.js','/build/_shared/chunk-DUKFR7TL.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':true},'routes/auth_spotify':{'id':'routes/auth_spotify','parentId':'root','path':'auth_spotify','index':undefined,'caseSensitive':undefined,'module':'/build/routes/auth_spotify-4BTAEDAI.js','imports':['/build/_shared/chunk-PBTJHL5C.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/client':{'id':'routes/client','parentId':'root','path':'client','index':undefined,'caseSensitive':undefined,'module':'/build/routes/client-LZLJZFGE.js','imports':['/build/_shared/chunk-PE7EVJAX.js','/build/_shared/chunk-PBTJHL5C.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/host':{'id':'routes/host','parentId':'root','path':'host','index':undefined,'caseSensitive':undefined,'module':'/build/routes/host-OTPK6YZY.js','imports':['/build/_shared/chunk-PE7EVJAX.js','/build/_shared/chunk-PBTJHL5C.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':true,'hasErrorBoundary':true},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-EIEBLZJF.js','imports':['/build/_shared/chunk-PBTJHL5C.js'],'hasAction':true,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/room.$roomID':{'id':'routes/room.$roomID','parentId':'root','path':'room/:roomID','index':undefined,'caseSensitive':undefined,'module':'/build/routes/room.$roomID-P3RNG24D.js','imports':['/build/_shared/chunk-PE7EVJAX.js','/build/_shared/chunk-PBTJHL5C.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false}},'version':'8d6ecf39','hmr':{'runtime':'/build/_shared/chunk-3PUPADQ7.js','timestamp':1714842627378},'url':'/build/manifest-8D6ECF39.js'};", "\nimport * as entryServer from \"/home/snoupix/work/sharify/app/entry.server.tsx\";\nimport * as route0 from \"./root.tsx\";\nimport * as route1 from \"./routes/auth_spotify.tsx\";\nimport * as route2 from \"./routes/room.$roomID.tsx\";\nimport * as route3 from \"./routes/client.tsx\";\nimport * as route4 from \"./routes/index.tsx\";\nimport * as route5 from \"./routes/host.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public/build\";\n  export const future = {\"v2_dev\":true,\"unstable_postcss\":false,\"unstable_tailwind\":false,\"v2_errorBoundary\":true,\"v2_headers\":true,\"v2_meta\":true,\"v2_normalizeFormMethod\":true,\"v2_routeConvention\":true};\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/auth_spotify\": {\n      id: \"routes/auth_spotify\",\n      parentId: \"root\",\n      path: \"auth_spotify\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/room.$roomID\": {\n      id: \"routes/room.$roomID\",\n      parentId: \"root\",\n      path: \"room/:roomID\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/client\": {\n      id: \"routes/client\",\n      parentId: \"root\",\n      path: \"client\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/host\": {\n      id: \"routes/host\",\n      parentId: \"root\",\n      path: \"host\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route5\n    }\n  };"],
  "mappings": "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",
  "names": ["isbot", "import_react", "import_node", "import_react", "storage", "json", "import_node", "dotenv", "client", "import_jsx_dev_runtime", "WsClient", "action", "loader", "import_node", "import_react", "import_react", "import_jsx_dev_runtime", "location", "import_jsx_dev_runtime", "action", "loader", "action", "loader", "import_react", "import_react_toastify", "import_node", "import_react", "import_jsx_dev_runtime", "import_react", "import_jsx_dev_runtime", "import_jsx_dev_runtime", "action", "loader", "recentTracks", "devices", "syncInterval", "_a", "action", "loader", "import_react_toastify", "import_react", "import_node", "import_jsx_dev_runtime", "action", "loader", "action", "import_react", "import_react_toastify", "import_jsx_dev_runtime", "action", "ErrorBoundary", "action", "loader", "import_react_toastify", "import_node", "import_react", "import_jsx_dev_runtime", "action", "loader", "ErrorBoundary"]
}
