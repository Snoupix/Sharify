{
  "version": 3,
  "sources": ["../../../app/routes/room.$roomID.tsx", "../../../app/components/hostRoom.tsx", "../../../app/components/clientRoom.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/room.$roomID.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/room.$roomID.tsx\");\n  import.meta.hot.lastModified = \"1707666133258.0908\";\n}\n// REMIX HMR END\n\nimport { useCallback, useEffect, useReducer, useRef, useState } from \"react\";\nimport { useFetcher, useLoaderData, useNavigate, useOutletContext } from \"@remix-run/react\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport { redirect, json } from \"@remix-run/node\";\nimport { api } from \"~/server/handlers.server\";\nimport Title from \"~/components/title\";\nimport { GetStorageValue, SetStorageValue, useDebounce } from \"~/utils/utils\";\nimport { getSessionData } from \"~/server/session.server\";\nimport HostRoom from \"~/components/hostRoom\";\nimport ClientRoom from \"~/components/clientRoom\";\nexport const action = async ({\n  request,\n  params\n}) => {\n  const username = await getSessionData(request, \"username\");\n  const formData = await request.formData();\n  const fetchType = formData.get(\"type\");\n  const id = params.roomID;\n  if (!id || !username) {\n    return redirect('/');\n  }\n  switch (fetchType) {\n    case \"fetchData\":\n      const currentTrack = formData.get(\"currentTrack\");\n      const party = api.GetParty(parseInt(id));\n      if (!party) {\n        return json({\n          tracksQueue: [],\n          clients: [],\n          isPartyDeleted: true\n        });\n      }\n      api.RemoveFromTracksQueue(parseInt(id), currentTrack);\n      return json({\n        tracksQueue: party.tracksQueue,\n        clients: party.clients,\n        isPartyDeleted: false\n      });\n    case \"deleteRoom\":\n      api.DeleteParty(parseInt(id), username);\n      return redirect('/');\n    case \"leaveRoom\":\n      api.LeaveParty(parseInt(id), username);\n      return redirect('/');\n    case \"addToQueue\":\n      const trackId = formData.get(\"trackId\");\n      const trackName = formData.get(\"trackName\");\n      api.AddToTracksQueue(parseInt(id), username, trackId, trackName);\n      return null;\n    case \"kick\":\n      {\n        const target = formData.get(\"username\");\n        api.KickUser(parseInt(id), target);\n        return null;\n      }\n    case \"ban\":\n      {\n        const target = formData.get(\"username\");\n        api.BanUser(parseInt(id), target);\n        return null;\n      }\n  }\n  return null;\n};\nexport const loader = async ({\n  request,\n  params\n}) => {\n  const id = params.roomID;\n  if (!id) {\n    return redirect('/');\n  }\n  const party = api.GetParty(parseInt(id));\n  if (!party) {\n    return json({\n      errorMessage: \"Error: Party not created or deleted\",\n      redirect: \"/host\"\n    });\n  }\n  const username = await getSessionData(request, \"username\");\n  if (!username) return redirect('/');\n  if (!party.clients.find(client => client.username == username)) {\n    return json({\n      errorMessage: `Error: You are not a member of the Party ${party.name} anymore`,\n      redirect: \"/\"\n    });\n  }\n  return json({\n    party,\n    isHost: party.clients.find(client => client.username == username)?.isHost\n  });\n};\nexport default function Room() {\n  _s();\n  const loaderData = useLoaderData();\n  const {\n    spotify: _spotify,\n    username: contextUsername\n  } = useOutletContext();\n  const spotify = _spotify;\n  const fetcher = useFetcher();\n  const navigate = useNavigate();\n  const [isAllowed, setIsAllowed] = useState(true);\n  const fetchDataTimeout = useRef(null);\n  const [fetchInterval, setFetchInterval] = useState();\n  const [syncInterval, setSyncInterval] = useState();\n  const [{\n    title,\n    volume,\n    progressMS,\n    durationMS,\n    isPlaying,\n    recentTracks,\n    partyTracksQ,\n    searchInput,\n    searchResults,\n    clients,\n    currentDevice,\n    devices,\n    seekPos,\n    tracksQueue\n  }, setRoomData] = useReducer((oldState, newState) => ({\n    ...oldState,\n    ...newState\n  }), {\n    title: \"Loading...\",\n    volume: 99.9,\n    progressMS: 0,\n    durationMS: 0,\n    isPlaying: false,\n    recentTracks: [],\n    partyTracksQ: [],\n    searchInput: \"\",\n    searchResults: [],\n    clients: [],\n    currentDevice: null,\n    devices: [],\n    seekPos: 0,\n    tracksQueue: []\n  });\n  const debounceVolume = useDebounce(volume, 600);\n  const debounceSearch = useDebounce(searchInput, 600);\n  const debounceSeek = useDebounce(seekPos, 500);\n  if (loaderData?.party?.id) {\n    // ws = io(`ws://127.0.0.1:3100/sharify_ws/${loaderData.party.id}`);\n  }\n  const FetchData = useCallback(delay => {\n    if (fetchDataTimeout.current) clearTimeout(fetchDataTimeout.current);\n    fetchDataTimeout.current = setTimeout(() => {\n      (async () => {\n        fetchDataTimeout.current = null;\n        const [playbackData, recentTracks, queueData] = await Promise.all([spotify.GetCurrentTrackData(), spotify.GetRecentlyPlayedTracks(5), spotify.GetCurrentQueueData()]);\n        if (playbackData instanceof Error) {\n          toast.error(`Error: Failed to fetch current track (${playbackData.message})`, {\n            position: \"bottom-right\",\n            autoClose: 2500,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            theme: \"light\"\n          });\n          console.error(playbackData.message);\n          return;\n        }\n        if (recentTracks instanceof Error) {\n          toast.error(`Error: Failed to fetch recent tracks (${recentTracks.message})`, {\n            position: \"bottom-right\",\n            autoClose: 2500,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            theme: \"light\"\n          });\n          console.error(recentTracks.message);\n          return;\n        }\n        if (queueData instanceof Error) {\n          toast.error(`Error: Failed to fetch tracks in queue (${queueData.message})`, {\n            position: \"bottom-right\",\n            autoClose: 2500,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            theme: \"light\"\n          });\n          console.error(queueData.message);\n          return;\n        }\n        if (!playbackData || !playbackData.device.is_active) {\n          const devices = await spotify.GetDevices();\n          if (!(devices instanceof Error)) {\n            setRoomData({\n              currentDevice: null,\n              devices\n            });\n          }\n        }\n        if (!playbackData) {\n          return setRoomData({\n            title: \"Play a music on Spotify to start using Sharify\"\n          });\n        }\n        const currentTrack = playbackData.item;\n        const recentArr = [];\n        const queueArr = [];\n        recentTracks.forEach(track => {\n          if (!(track instanceof Error)) {\n            recentArr.push(track);\n          }\n        });\n        queueData.queue.forEach((track, i) => {\n          if (i >= 5) return;\n          queueArr.push(track);\n        });\n        if (!currentTrack) return console.error(\"Couldn't fetch current track\");\n        if (currentTrack.type == \"episode\") return setRoomData({\n          title: currentTrack.name,\n          recentTracks: recentArr,\n          tracksQueue: queueArr,\n          durationMS: currentTrack.duration_ms\n        });\n        return setRoomData({\n          title: `${currentTrack.name} - ${currentTrack.artists.map(artist => artist.name).join(', ')}`,\n          recentTracks: recentArr,\n          tracksQueue: queueArr,\n          durationMS: currentTrack.duration_ms,\n          progressMS: playbackData.progress_ms || 0,\n          isPlaying: playbackData.is_playing,\n          volume: playbackData.device.volume_percent || 50\n        });\n      })();\n    }, delay || 500);\n  }, [fetchDataTimeout, setRoomData]);\n  useEffect(() => {\n    if (!isAllowed) return;\n    const interval = setInterval(() => fetcher.submit({\n      type: \"fetchData\",\n      username: contextUsername,\n      currentTrack: title\n    }, {\n      method: \"post\"\n    }), 1000);\n    setFetchInterval(interval);\n    const syncInterval = setInterval(() => FetchData(0), 10000);\n    setSyncInterval(syncInterval);\n    const timeout = setTimeout(() => FetchData(0), 1000);\n    return () => {\n      clearTimeout(timeout);\n      clearInterval(interval);\n      clearInterval(syncInterval);\n    };\n  }, [title]);\n  useEffect(() => {\n    if (fetcher.data) {\n      if (fetcher.data.isPartyDeleted) {\n        const _toast = toast('The party has been deleted by the host!', {\n          position: \"bottom-right\",\n          autoClose: 2500,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          theme: \"light\"\n        });\n        const timeout = setTimeout(() => navigate('/'), 3000);\n        setIsAllowed(false);\n        return () => {\n          if (toast.isActive(_toast)) toast.dismiss(_toast);\n          clearTimeout(timeout);\n        };\n      }\n      if (!fetcher.data.clients.find(client => client.username == contextUsername)) {\n        clearInterval(fetchInterval);\n        clearInterval(syncInterval);\n        setIsAllowed(false);\n        const _toast = toast('You have been kicked of the room by the host!', {\n          position: \"bottom-right\",\n          autoClose: 2500,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          theme: \"light\"\n        });\n        const timeout = setTimeout(() => navigate('/client'), 3000);\n        return () => {\n          if (toast.isActive(_toast)) toast.dismiss(_toast);\n          clearTimeout(timeout);\n        };\n      }\n      setRoomData({\n        partyTracksQ: fetcher.data.tracksQueue,\n        clients: fetcher.data.clients\n      });\n    }\n  }, [fetcher.data]);\n  useEffect(() => {\n    if (!isPlaying) return;\n    const timeout = setTimeout(() => {\n      if (durationMS > 0 && progressMS >= durationMS) {\n        clearTimeout(timeout);\n        FetchData();\n        return;\n      }\n      setRoomData({\n        progressMS: progressMS + 1000\n      });\n    }, 1000);\n    return () => clearTimeout(timeout);\n  }, [progressMS, durationMS, setRoomData, isPlaying, FetchData]);\n  useEffect(() => {\n    if (debounceVolume == 99.9) return; // dodge initializer\n\n    spotify.SetVolume(debounceVolume);\n  }, [debounceVolume]);\n  useEffect(() => {\n    if (debounceSearch.trim() == \"\") return; // dodge initializer\n\n    spotify.SearchTracks(debounceSearch).then(resp => {\n      if (resp instanceof Error) return console.error(resp.message);\n      setRoomData({\n        searchResults: resp.tracks?.items\n      });\n    }).catch(console.error);\n  }, [debounceSearch]);\n  useEffect(() => {\n    if (debounceSeek == 0) return; // dodge initializer\n\n    spotify.Seek(debounceSeek);\n  }, [debounceSeek]);\n  useEffect(() => {\n    if (loaderData.errorMessage) {\n      const _toast = toast.error(loaderData.errorMessage, {\n        position: \"bottom-right\",\n        autoClose: 2500,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        theme: \"light\"\n      });\n      const timeout = setTimeout(() => navigate(loaderData.redirect || '/'), 3000);\n      setIsAllowed(false);\n      return () => {\n        if (toast.isActive(_toast)) toast.dismiss(_toast);\n        clearTimeout(timeout);\n      };\n    }\n    SetStorageValue({\n      st: {\n        at: loaderData.party.spotifyCreds.accessToken,\n        rt: loaderData.party.spotifyCreds.refreshToken,\n        ein: loaderData.party.spotifyCreds.expiresIn,\n        date: loaderData.party.spotifyCreds.date\n      }\n    });\n    spotify.is_owner = loaderData.isHost;\n    if (currentDevice) return;\n    const spotifyDevice = GetStorageValue(\"SpotifyDevice\");\n    if (spotifyDevice) {\n      const device = JSON.parse(spotifyDevice);\n      setRoomData({\n        currentDevice: device\n      });\n    } else if (spotify.current_device) {\n      setRoomData({\n        currentDevice: spotify.current_device\n      });\n    } else {\n      (async () => {\n        const devices = await spotify.GetDevices();\n        if (devices instanceof Error) {\n          toast.error(`Error: Failed to get devices (${devices.message})`, {\n            position: \"bottom-right\",\n            autoClose: 2500,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            theme: \"light\"\n          });\n          return;\n        }\n        setRoomData({\n          currentDevice: spotify.current_device,\n          devices\n        });\n      })();\n    }\n  }, [loaderData, navigate]);\n  const addTrackToQueue = track => {\n    (async () => {\n      const res = await spotify.AddNextTrack(track.external_urls.spotify);\n      if (!(res instanceof Error)) {\n        toast(`Added track ${track.name} - ${track.artists.map(a => a.name).join(', ')} to queue !`, {\n          position: \"bottom-right\",\n          autoClose: 3000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          theme: \"light\"\n        });\n      }\n      fetcher.submit({\n        type: \"addToQueue\",\n        trackId: track.id,\n        trackName: `${track.name} - ${track.artists.map(artist => artist.name).join(', ')}`\n      }, {\n        method: \"post\"\n      });\n      setRoomData({\n        searchResults: []\n      });\n    })();\n  };\n  return <>\n            <Title />\n            {isAllowed ? loaderData.errorMessage ? null : loaderData.isHost ? <HostRoom fetcher={fetcher} username={contextUsername} title={title} volume={volume} setRoomData={setRoomData} isPlaying={isPlaying} durationMS={durationMS} progressMS={progressMS} FetchData={FetchData} clients={clients} recentTracks={recentTracks} tracksQueue={tracksQueue} partyTracksQ={partyTracksQ} currentDevice={currentDevice} devices={devices} searchResults={searchResults} addTrackToQueue={addTrackToQueue} /> : <ClientRoom username={contextUsername} title={title} isPlaying={isPlaying} durationMS={durationMS} progressMS={progressMS} FetchData={FetchData} recentTracks={recentTracks} tracksQueue={tracksQueue} partyTracksQ={partyTracksQ} setRoomData={setRoomData} searchResults={searchResults} addTrackToQueue={addTrackToQueue} /> : null}\n            <ToastContainer />\n        </>;\n}\n_s(Room, \"MAVryHtsqDofr0zl1KvPSHXu03M=\", false, function () {\n  return [useLoaderData, useOutletContext, useFetcher, useNavigate, useDebounce, useDebounce, useDebounce];\n});\n_c = Room;\nexport const Icon = props => {\n  const {\n    classStr,\n    onClick\n  } = props;\n  return <div className=\"flex text-center items-center justify-center cursor-pointer rounded-full hover:bg-main-color-hover/30 w-12 h-12\" onClick={onClick}>\n            <i className={`${classStr} text-2xl`}></i>\n        </div>;\n};\n_c2 = Icon;\nvar _c, _c2;\n$RefreshReg$(_c, \"Room\");\n$RefreshReg$(_c2, \"Icon\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/hostRoom.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/hostRoom.tsx\");\n  import.meta.hot.lastModified = \"1702628822321.2346\";\n}\n// REMIX HMR END\n\nimport { useState } from \"react\";\nimport { Form } from \"@remix-run/react\";\nimport { Icon } from \"~/routes/room.$roomID\";\nimport spotify from \"~/utils/spotify\";\nimport { FormatTime, SetStorageValue } from \"~/utils/utils\";\nexport default function HostRoom(props) {\n  _s();\n  const {\n    fetcher,\n    username,\n    title,\n    volume,\n    setRoomData,\n    isPlaying,\n    durationMS,\n    progressMS,\n    FetchData,\n    clients,\n    recentTracks,\n    tracksQueue,\n    partyTracksQ,\n    currentDevice,\n    devices,\n    searchResults,\n    addTrackToQueue\n  } = props;\n  const [showVolume, setShowVolume] = useState(false);\n  const tracksQElements = [];\n  tracksQueue.forEach((track, i) => {\n    const owner = partyTracksQ.find(trackOwner => trackOwner.trackId == track.id);\n    tracksQElements.push(track.type == \"episode\" ? null : <div key={i} className=\"text-lg\">\n                <span>{`[${i + 1}]${owner ? ` (${owner.username})` : \"\"} ${track.name} - ${track.artists.map(a => a.name).join(', ')}`}</span>\n            </div>);\n  });\n  const handlePlay = () => {\n    spotify.Resume().then(() => FetchData(250)).catch(console.error);\n  };\n  const handlePause = () => {\n    spotify.Pause().then(() => FetchData(250)).catch(console.error);\n  };\n  const handleNext = () => {\n    spotify.SkipToNext().then(() => FetchData(500)).catch(console.error);\n  };\n  const handlePrevious = () => {\n    if (durationMS - progressMS < durationMS / 2) {\n      return spotify.Seek(0).then(() => FetchData(500)).catch(console.error);\n    }\n    spotify.SkipToPrevious().then(() => FetchData(500)).catch(console.error);\n  };\n  const handleSeek = e => {\n    setRoomData({\n      seekPos: parseInt(e.target.value)\n    });\n    FetchData(1000);\n  };\n  const setSpotifyDevice = device => {\n    spotify.SetDevice(device);\n    SetStorageValue({\n      SpotifyDevice: JSON.stringify(device)\n    });\n    fetcher.submit({\n      type: \"setSpotifyDevice\",\n      spotifyDevice: JSON.stringify(device)\n    }, {\n      method: 'post'\n    });\n  };\n  return <>\n            <nav className=\"absolute top-0 right-10 w-2/6 h-28 z-10 flex flex-row items-center justify-end content-center\">\n                <Form method=\"post\">\n                    <input type=\"hidden\" name=\"username\" value={username} />\n                    <input type=\"hidden\" name=\"type\" value=\"deleteRoom\" />\n                    <button type=\"submit\" className=\"text-2xl rounded-3xl w-36 border-2 duration-300 border-main-color hover:border-red-700 hover:text-red-700 hover:border-4 hover:scale-105\">\n                        {\"Delete Room\"}\n                    </button>\n                </Form>\n            </nav>\n            <section className=\"scrollsnap-page\">\n                <div className=\"flex flex-col items-center justify-center text-center w-10/12 m-auto my-28\">\n                    {!currentDevice ? <div>\n                            <span className=\"text-2xl p-6\">Select a Device to use</span>\n                            {devices.map(device => <button key={device.name} className=\"text-2xl form-input rounded-xl\" onClick={() => setSpotifyDevice(device)}>\n                                    {`${device.name} (${device.is_active ? \"Active\" : \"Inactive\"})`}\n                                </button>)}\n                        </div> : null}\n                    <span className=\"text-2xl p-6\">{title}</span>\n                    <div className=\"flex flex-col gap-5 mb-5\">\n                        <span>{FormatTime(progressMS, durationMS)}</span>\n                        <input type=\"range\" min={0} max={durationMS} defaultValue={progressMS} className=\"accent-indigo-700\" draggable={false} onChange={handleSeek} />\n                    </div>\n                    <div className=\"scrollsnap-start-component flex flex-row items-center justify-center gap-x-10 py-6 border-y-[1px] border-main-color-hover w-full\">\n                        <Icon classStr=\"fa-solid fa-backward-step\" onClick={handlePrevious} />\n                        {isPlaying ? <Icon classStr=\"fa-solid fa-pause\" onClick={handlePause} /> : <Icon classStr=\"fa-solid fa-play\" onClick={handlePlay} />}\n                        <Icon classStr=\"fa-solid fa-forward-step\" onClick={handleNext} />\n                        {volume >= 50 ? <Icon onClick={() => setShowVolume(v => !v)} classStr=\"fa-solid fa-volume-high\" /> : null}\n                        {volume < 50 && volume > 0 ? <Icon onClick={() => setShowVolume(v => !v)} classStr=\"fa-solid fa-volume-low\" /> : null}\n                        {volume == 0 ? <Icon onClick={() => setShowVolume(v => !v)} classStr=\"fa-solid fa-volume-xmark\" /> : null}\n                        {showVolume ? <div className=\"flex flex-col text-center items-center justify-center\">\n                                <span className=\"text-xl\">{volume} %</span>\n                                <input type=\"range\" min={0} max={100} value={volume} className=\"accent-main-color\" onChange={e => setRoomData({\n              volume: parseInt(e.currentTarget.value)\n            })} />\n                            </div> : null}\n                    </div>\n                    <div className=\"scrollsnap-start-component flex flex-row w-full\">\n                        <div className=\"flex flex-col flex-wrap h-80 w-full\">\n                            <span className=\"text-2xl\">Party members:</span>\n                            {clients.map(client => <div className=\"flex flex-row flex-wrap gap-3 justify-center items-center max-w-[50%]\" key={client.username}>\n                                    <span className={`input-form text-3xl ${client.isHost ? \"text-main-color\" : \"text-indigo-700\"}`}>\n                                        {client.username}\n                                    </span>\n                                    {!client.isHost ? <>\n                                            <Form method=\"post\">\n                                                <input type=\"hidden\" name=\"username\" value={client.username} />\n                                                <input type=\"hidden\" name=\"type\" value=\"kick\" />\n                                                <button type=\"submit\">Kick</button>\n                                            </Form>\n                                            <Form method=\"post\">\n                                                <input type=\"hidden\" name=\"username\" value={client.username} />\n                                                <input type=\"hidden\" name=\"type\" value=\"ban\" />\n                                                <button type=\"submit\">Ban</button>\n                                            </Form>\n                                        </> : null}\n                                </div>)}\n                        </div>\n                        <div className=\"flex flex-row justify-center items-center content-center text-center w-full gap-5 pb-5\">\n                            <div className=\"w-full flex flex-col gap-2\">\n                                <span className=\"text-2xl\">Coming next:</span>\n                                {tracksQElements.map(el => el)}\n                            </div>\n                            <div className=\"w-full flex flex-col gap-2\">\n                                <span className=\"text-2xl\">Previously played:</span>\n                                {recentTracks.map((trackData, i) => <div key={i} className=\"text-lg\">\n                                        <span>\n                                            {`[${i + 1}] ${trackData.track.name} - ${trackData.track.artists.map(a => a.name).join(', ')}`}\n                                        </span>\n                                    </div>)}\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"scrollsnap-end-component flex flex-col items-center justify-center content-center gap-2 border-t-[1px] border-main-color-hover w-full h-56\">\n                        <span className=\"text-2xl\">Search a song to add to the queue:</span>\n                        <input className=\"rounded-lg outline-none\" type=\"text\" name=\"searchBar\" onChange={e => setRoomData({\n            searchInput: e.target.value\n          })} />\n                        <div className=\"flex flex-row flex-wrap gap-5 justify-center overflow-y-scroll\">\n                            {searchResults.map(track => <button key={track.id} className=\"border-[1px] border-[white] rounded-xl text-lg p-1 mt-4 hover:scale-105\" onClick={() => addTrackToQueue(track)}>\n                                    {`${track.name} - ${track.artists.map(a => a.name).join(', ')}`}\n                                </button>)}\n                        </div>\n                    </div>\n                </div>\n            </section>\n        </>;\n}\n_s(HostRoom, \"7RAbUW9LFA3LxekzmPif0czGMFg=\");\n_c = HostRoom;\nvar _c;\n$RefreshReg$(_c, \"HostRoom\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/clientRoom.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/clientRoom.tsx\");\n  import.meta.hot.lastModified = \"1702628822321.2346\";\n}\n// REMIX HMR END\n\nimport { Form } from \"@remix-run/react\";\nimport { FormatTime } from \"~/utils/utils\";\nexport default function ClientRoom(props) {\n  const {\n    username,\n    title,\n    durationMS,\n    progressMS,\n    recentTracks,\n    tracksQueue,\n    partyTracksQ,\n    setRoomData,\n    searchResults,\n    addTrackToQueue\n  } = props;\n  const tracksQElements = [];\n  tracksQueue.forEach((track, i) => {\n    const owner = partyTracksQ.find(trackOwner => trackOwner.trackId == track.id);\n    tracksQElements.push(track.type == \"episode\" ? null : <div key={i} className=\"text-lg\">\n                <span>{`[${i + 1}]${owner ? ` (${owner.username})` : \"\"} ${track.name} - ${track.artists.map(a => a.name).join(', ')}`}</span>\n            </div>);\n  });\n  return <>\n            <nav className=\"absolute top-0 right-10 w-2/6 h-28 z-10 flex flex-row items-center justify-end content-center\">\n                <Form method=\"post\">\n                    <input type=\"hidden\" name=\"username\" value={username} />\n                    <input type=\"hidden\" name=\"type\" value=\"leaveRoom\" />\n                    <button type=\"submit\" className=\"text-2xl rounded-3xl w-36 border-2 duration-300 border-main-color hover:border-red-700 hover:text-red-700 hover:border-4 hover:scale-105\">\n                        {\"Leave Room\"}\n                    </button>\n                </Form>\n            </nav>\n            <section className=\"scrollsnap-page\">\n                <div className=\"flex flex-col items-center justify-center text-center w-10/12 m-auto my-28\">\n                    <span className=\"text-2xl p-6\">{title}</span>\n                    <div className=\"flex flex-col gap-5 mb-5\">\n                        <span>{FormatTime(progressMS, durationMS)}</span>\n                        <input type=\"range\" min={0} max={durationMS} defaultValue={progressMS} className=\"accent-indigo-700\" draggable={false} onChange={e => e.target.value = String(progressMS)} />\n                    </div>\n                    <div className=\"scrollsnap-end-component flex flex-row items-center justify-center gap-x-10 py-6 border-t-[1px] border-main-color-hover w-full\">\n                        <div className=\"flex flex-col items-center justify-center content-center gap-2 w-full h-56 overflow-x-hidden\">\n                            <span className=\"text-2xl\">Search a song to add to the queue:</span>\n                            <input className=\"rounded-lg outline-none\" type=\"text\" name=\"searchBar\" onChange={e => setRoomData({\n              searchInput: e.target.value\n            })} />\n                            <div className=\"flex flex-row flex-wrap gap-2 justify-center overflow-y-scroll\">\n                                {searchResults.map(track => <button key={track.id} className=\"border-[1px] border-[white] rounded-xl text-lg p-1 m-4 hover:scale-105\" onClick={() => addTrackToQueue(track)}>\n                                        {`${track.name} - ${track.artists.map(a => a.name).join(', ')}`}\n                                    </button>)}\n                            </div>\n                        </div>\n                        <div className=\"flex flex-row justify-center items-center content-center text-center w-full gap-5 pb-5\">\n                            <div className=\"w-full flex flex-col gap-2\">\n                                <span className=\"text-2xl\">Coming next:</span>\n                                {tracksQElements.map(el => el)}\n                            </div>\n                            <div className=\"w-full flex flex-col gap-2\">\n                                <span className=\"text-2xl\">Previously played:</span>\n                                {recentTracks.map((trackData, i) => <div key={i} className=\"text-lg\">\n                                        <span>\n                                            {`[${i + 1}] ${trackData.track.name} - ${trackData.track.artists.map(a => a.name).join(', ')}`}\n                                        </span>\n                                    </div>)}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        </>;\n}\n_c = ClientRoom;\nvar _c;\n$RefreshReg$(_c, \"ClientRoom\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react", "import_jsx_dev_runtime", "_c", "import_jsx_dev_runtime", "_s", "_s", "recentTracks", "devices", "syncInterval", "_a", "_c", "_c2"]
}
