// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: cmd.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { RoleError, roleErrorFromJSON, roleErrorToJSON, RolePermission } from "./role";
import { Room, RoomError, roomErrorFromJSON, roomErrorToJSON } from "./room";
import { PlaybackState, TrackArray } from "./spotify";

export const protobufPackage = "cmd";

export interface HttpCommand {
  createRoom?: HttpCommand_CreateRoom | undefined;
  getRoom?: HttpCommand_GetRoom | undefined;
  joinRoom?: HttpCommand_JoinRoom | undefined;
}

export interface HttpCommand_CreateRoom {
  userId: string;
  username: string;
  name: string;
  credentials: HttpCommand_Credentials | undefined;
}

export interface HttpCommand_GetRoom {
  roomId: Uint8Array;
}

export interface HttpCommand_Credentials {
  accessToken: string;
  refreshToken: string;
  expiresIn: number;
  createdAt: string;
}

export interface HttpCommand_JoinRoom {
  roomId: Uint8Array;
  userId: string;
  username: string;
}

export interface Command {
  /** Useless bool value */
  getRoom?: boolean | undefined;
  search?: string | undefined;
  addToQueue?: Command_AddTrackToQueue | undefined;
  setVolume?:
    | number
    | undefined;
  /** Useless bool value */
  playResume?:
    | boolean
    | undefined;
  /** Useless bool value */
  pause?:
    | boolean
    | undefined;
  /** Useless bool value */
  skipNext?:
    | boolean
    | undefined;
  /** Useless bool value */
  skipPrevious?: boolean | undefined;
  seekToPos?: number | undefined;
  kick?: Command_Kick | undefined;
  ban?:
    | Command_Ban
    | undefined;
  /** Useless bool value */
  leaveRoom?: boolean | undefined;
  createRole?: Command_CreateRole | undefined;
  renameRole?: Command_RenameRole | undefined;
}

export interface Command_Kick {
  userId: string;
  reason: string;
}

export interface Command_Ban {
  userId: string;
  reason: string;
}

export interface Command_AddTrackToQueue {
  trackId: string;
}

export interface Command_CreateRole {
  name: string;
  permissions: RolePermission | undefined;
}

export interface Command_RenameRole {
  roleId: Uint8Array;
  name: string;
}

export interface CommandResponse {
  roomError?: RoomError | undefined;
  room?: Room | undefined;
  genericError?: string | undefined;
  kick?: CommandResponse_Kick | undefined;
  ban?: CommandResponse_Ban | undefined;
  spotifyPlaybackState?: CommandResponse_SpotifyPlaybackState | undefined;
  spotifySearchResult?: TrackArray | undefined;
  spotifyRateLimited?: number | undefined;
  roleError?: RoleError | undefined;
}

export interface CommandResponse_Kick {
  reason: string;
}

export interface CommandResponse_Ban {
  reason: string;
}

export interface CommandResponse_SpotifyPlaybackState {
  state?: PlaybackState | undefined;
  previousTracks: TrackArray | undefined;
  nextTracks: TrackArray | undefined;
}

function createBaseHttpCommand(): HttpCommand {
  return { createRoom: undefined, getRoom: undefined, joinRoom: undefined };
}

export const HttpCommand: MessageFns<HttpCommand> = {
  encode(message: HttpCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createRoom !== undefined) {
      HttpCommand_CreateRoom.encode(message.createRoom, writer.uint32(10).fork()).join();
    }
    if (message.getRoom !== undefined) {
      HttpCommand_GetRoom.encode(message.getRoom, writer.uint32(18).fork()).join();
    }
    if (message.joinRoom !== undefined) {
      HttpCommand_JoinRoom.encode(message.joinRoom, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HttpCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHttpCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.createRoom = HttpCommand_CreateRoom.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.getRoom = HttpCommand_GetRoom.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.joinRoom = HttpCommand_JoinRoom.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HttpCommand {
    return {
      createRoom: isSet(object.createRoom) ? HttpCommand_CreateRoom.fromJSON(object.createRoom) : undefined,
      getRoom: isSet(object.getRoom) ? HttpCommand_GetRoom.fromJSON(object.getRoom) : undefined,
      joinRoom: isSet(object.joinRoom) ? HttpCommand_JoinRoom.fromJSON(object.joinRoom) : undefined,
    };
  },

  toJSON(message: HttpCommand): unknown {
    const obj: any = {};
    if (message.createRoom !== undefined) {
      obj.createRoom = HttpCommand_CreateRoom.toJSON(message.createRoom);
    }
    if (message.getRoom !== undefined) {
      obj.getRoom = HttpCommand_GetRoom.toJSON(message.getRoom);
    }
    if (message.joinRoom !== undefined) {
      obj.joinRoom = HttpCommand_JoinRoom.toJSON(message.joinRoom);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HttpCommand>, I>>(base?: I): HttpCommand {
    return HttpCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HttpCommand>, I>>(object: I): HttpCommand {
    const message = createBaseHttpCommand();
    message.createRoom = (object.createRoom !== undefined && object.createRoom !== null)
      ? HttpCommand_CreateRoom.fromPartial(object.createRoom)
      : undefined;
    message.getRoom = (object.getRoom !== undefined && object.getRoom !== null)
      ? HttpCommand_GetRoom.fromPartial(object.getRoom)
      : undefined;
    message.joinRoom = (object.joinRoom !== undefined && object.joinRoom !== null)
      ? HttpCommand_JoinRoom.fromPartial(object.joinRoom)
      : undefined;
    return message;
  },
};

function createBaseHttpCommand_CreateRoom(): HttpCommand_CreateRoom {
  return { userId: "", username: "", name: "", credentials: undefined };
}

export const HttpCommand_CreateRoom: MessageFns<HttpCommand_CreateRoom> = {
  encode(message: HttpCommand_CreateRoom, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.username !== "") {
      writer.uint32(18).string(message.username);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.credentials !== undefined) {
      HttpCommand_Credentials.encode(message.credentials, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HttpCommand_CreateRoom {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHttpCommand_CreateRoom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.credentials = HttpCommand_Credentials.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HttpCommand_CreateRoom {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      credentials: isSet(object.credentials) ? HttpCommand_Credentials.fromJSON(object.credentials) : undefined,
    };
  },

  toJSON(message: HttpCommand_CreateRoom): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.credentials !== undefined) {
      obj.credentials = HttpCommand_Credentials.toJSON(message.credentials);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HttpCommand_CreateRoom>, I>>(base?: I): HttpCommand_CreateRoom {
    return HttpCommand_CreateRoom.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HttpCommand_CreateRoom>, I>>(object: I): HttpCommand_CreateRoom {
    const message = createBaseHttpCommand_CreateRoom();
    message.userId = object.userId ?? "";
    message.username = object.username ?? "";
    message.name = object.name ?? "";
    message.credentials = (object.credentials !== undefined && object.credentials !== null)
      ? HttpCommand_Credentials.fromPartial(object.credentials)
      : undefined;
    return message;
  },
};

function createBaseHttpCommand_GetRoom(): HttpCommand_GetRoom {
  return { roomId: new Uint8Array(0) };
}

export const HttpCommand_GetRoom: MessageFns<HttpCommand_GetRoom> = {
  encode(message: HttpCommand_GetRoom, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roomId.length !== 0) {
      writer.uint32(10).bytes(message.roomId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HttpCommand_GetRoom {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHttpCommand_GetRoom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.roomId = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HttpCommand_GetRoom {
    return { roomId: isSet(object.roomId) ? bytesFromBase64(object.roomId) : new Uint8Array(0) };
  },

  toJSON(message: HttpCommand_GetRoom): unknown {
    const obj: any = {};
    if (message.roomId.length !== 0) {
      obj.roomId = base64FromBytes(message.roomId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HttpCommand_GetRoom>, I>>(base?: I): HttpCommand_GetRoom {
    return HttpCommand_GetRoom.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HttpCommand_GetRoom>, I>>(object: I): HttpCommand_GetRoom {
    const message = createBaseHttpCommand_GetRoom();
    message.roomId = object.roomId ?? new Uint8Array(0);
    return message;
  },
};

function createBaseHttpCommand_Credentials(): HttpCommand_Credentials {
  return { accessToken: "", refreshToken: "", expiresIn: 0, createdAt: "" };
}

export const HttpCommand_Credentials: MessageFns<HttpCommand_Credentials> = {
  encode(message: HttpCommand_Credentials, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessToken !== "") {
      writer.uint32(10).string(message.accessToken);
    }
    if (message.refreshToken !== "") {
      writer.uint32(18).string(message.refreshToken);
    }
    if (message.expiresIn !== 0) {
      writer.uint32(24).uint32(message.expiresIn);
    }
    if (message.createdAt !== "") {
      writer.uint32(34).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HttpCommand_Credentials {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHttpCommand_Credentials();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.refreshToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.expiresIn = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HttpCommand_Credentials {
    return {
      accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
      refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "",
      expiresIn: isSet(object.expiresIn) ? globalThis.Number(object.expiresIn) : 0,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
    };
  },

  toJSON(message: HttpCommand_Credentials): unknown {
    const obj: any = {};
    if (message.accessToken !== "") {
      obj.accessToken = message.accessToken;
    }
    if (message.refreshToken !== "") {
      obj.refreshToken = message.refreshToken;
    }
    if (message.expiresIn !== 0) {
      obj.expiresIn = Math.round(message.expiresIn);
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HttpCommand_Credentials>, I>>(base?: I): HttpCommand_Credentials {
    return HttpCommand_Credentials.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HttpCommand_Credentials>, I>>(object: I): HttpCommand_Credentials {
    const message = createBaseHttpCommand_Credentials();
    message.accessToken = object.accessToken ?? "";
    message.refreshToken = object.refreshToken ?? "";
    message.expiresIn = object.expiresIn ?? 0;
    message.createdAt = object.createdAt ?? "";
    return message;
  },
};

function createBaseHttpCommand_JoinRoom(): HttpCommand_JoinRoom {
  return { roomId: new Uint8Array(0), userId: "", username: "" };
}

export const HttpCommand_JoinRoom: MessageFns<HttpCommand_JoinRoom> = {
  encode(message: HttpCommand_JoinRoom, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roomId.length !== 0) {
      writer.uint32(10).bytes(message.roomId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.username !== "") {
      writer.uint32(26).string(message.username);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HttpCommand_JoinRoom {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHttpCommand_JoinRoom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.roomId = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.username = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HttpCommand_JoinRoom {
    return {
      roomId: isSet(object.roomId) ? bytesFromBase64(object.roomId) : new Uint8Array(0),
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
    };
  },

  toJSON(message: HttpCommand_JoinRoom): unknown {
    const obj: any = {};
    if (message.roomId.length !== 0) {
      obj.roomId = base64FromBytes(message.roomId);
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HttpCommand_JoinRoom>, I>>(base?: I): HttpCommand_JoinRoom {
    return HttpCommand_JoinRoom.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HttpCommand_JoinRoom>, I>>(object: I): HttpCommand_JoinRoom {
    const message = createBaseHttpCommand_JoinRoom();
    message.roomId = object.roomId ?? new Uint8Array(0);
    message.userId = object.userId ?? "";
    message.username = object.username ?? "";
    return message;
  },
};

function createBaseCommand(): Command {
  return {
    getRoom: undefined,
    search: undefined,
    addToQueue: undefined,
    setVolume: undefined,
    playResume: undefined,
    pause: undefined,
    skipNext: undefined,
    skipPrevious: undefined,
    seekToPos: undefined,
    kick: undefined,
    ban: undefined,
    leaveRoom: undefined,
    createRole: undefined,
    renameRole: undefined,
  };
}

export const Command: MessageFns<Command> = {
  encode(message: Command, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.getRoom !== undefined) {
      writer.uint32(8).bool(message.getRoom);
    }
    if (message.search !== undefined) {
      writer.uint32(18).string(message.search);
    }
    if (message.addToQueue !== undefined) {
      Command_AddTrackToQueue.encode(message.addToQueue, writer.uint32(26).fork()).join();
    }
    if (message.setVolume !== undefined) {
      writer.uint32(32).uint32(message.setVolume);
    }
    if (message.playResume !== undefined) {
      writer.uint32(40).bool(message.playResume);
    }
    if (message.pause !== undefined) {
      writer.uint32(48).bool(message.pause);
    }
    if (message.skipNext !== undefined) {
      writer.uint32(56).bool(message.skipNext);
    }
    if (message.skipPrevious !== undefined) {
      writer.uint32(64).bool(message.skipPrevious);
    }
    if (message.seekToPos !== undefined) {
      writer.uint32(72).uint64(message.seekToPos);
    }
    if (message.kick !== undefined) {
      Command_Kick.encode(message.kick, writer.uint32(82).fork()).join();
    }
    if (message.ban !== undefined) {
      Command_Ban.encode(message.ban, writer.uint32(90).fork()).join();
    }
    if (message.leaveRoom !== undefined) {
      writer.uint32(96).bool(message.leaveRoom);
    }
    if (message.createRole !== undefined) {
      Command_CreateRole.encode(message.createRole, writer.uint32(106).fork()).join();
    }
    if (message.renameRole !== undefined) {
      Command_RenameRole.encode(message.renameRole, writer.uint32(114).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Command {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.getRoom = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.search = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.addToQueue = Command_AddTrackToQueue.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.setVolume = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.playResume = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.pause = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.skipNext = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.skipPrevious = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.seekToPos = longToNumber(reader.uint64());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.kick = Command_Kick.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.ban = Command_Ban.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.leaveRoom = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.createRole = Command_CreateRole.decode(reader, reader.uint32());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.renameRole = Command_RenameRole.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Command {
    return {
      getRoom: isSet(object.getRoom) ? globalThis.Boolean(object.getRoom) : undefined,
      search: isSet(object.search) ? globalThis.String(object.search) : undefined,
      addToQueue: isSet(object.addToQueue) ? Command_AddTrackToQueue.fromJSON(object.addToQueue) : undefined,
      setVolume: isSet(object.setVolume) ? globalThis.Number(object.setVolume) : undefined,
      playResume: isSet(object.playResume) ? globalThis.Boolean(object.playResume) : undefined,
      pause: isSet(object.pause) ? globalThis.Boolean(object.pause) : undefined,
      skipNext: isSet(object.skipNext) ? globalThis.Boolean(object.skipNext) : undefined,
      skipPrevious: isSet(object.skipPrevious) ? globalThis.Boolean(object.skipPrevious) : undefined,
      seekToPos: isSet(object.seekToPos) ? globalThis.Number(object.seekToPos) : undefined,
      kick: isSet(object.kick) ? Command_Kick.fromJSON(object.kick) : undefined,
      ban: isSet(object.ban) ? Command_Ban.fromJSON(object.ban) : undefined,
      leaveRoom: isSet(object.leaveRoom) ? globalThis.Boolean(object.leaveRoom) : undefined,
      createRole: isSet(object.createRole) ? Command_CreateRole.fromJSON(object.createRole) : undefined,
      renameRole: isSet(object.renameRole) ? Command_RenameRole.fromJSON(object.renameRole) : undefined,
    };
  },

  toJSON(message: Command): unknown {
    const obj: any = {};
    if (message.getRoom !== undefined) {
      obj.getRoom = message.getRoom;
    }
    if (message.search !== undefined) {
      obj.search = message.search;
    }
    if (message.addToQueue !== undefined) {
      obj.addToQueue = Command_AddTrackToQueue.toJSON(message.addToQueue);
    }
    if (message.setVolume !== undefined) {
      obj.setVolume = Math.round(message.setVolume);
    }
    if (message.playResume !== undefined) {
      obj.playResume = message.playResume;
    }
    if (message.pause !== undefined) {
      obj.pause = message.pause;
    }
    if (message.skipNext !== undefined) {
      obj.skipNext = message.skipNext;
    }
    if (message.skipPrevious !== undefined) {
      obj.skipPrevious = message.skipPrevious;
    }
    if (message.seekToPos !== undefined) {
      obj.seekToPos = Math.round(message.seekToPos);
    }
    if (message.kick !== undefined) {
      obj.kick = Command_Kick.toJSON(message.kick);
    }
    if (message.ban !== undefined) {
      obj.ban = Command_Ban.toJSON(message.ban);
    }
    if (message.leaveRoom !== undefined) {
      obj.leaveRoom = message.leaveRoom;
    }
    if (message.createRole !== undefined) {
      obj.createRole = Command_CreateRole.toJSON(message.createRole);
    }
    if (message.renameRole !== undefined) {
      obj.renameRole = Command_RenameRole.toJSON(message.renameRole);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Command>, I>>(base?: I): Command {
    return Command.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Command>, I>>(object: I): Command {
    const message = createBaseCommand();
    message.getRoom = object.getRoom ?? undefined;
    message.search = object.search ?? undefined;
    message.addToQueue = (object.addToQueue !== undefined && object.addToQueue !== null)
      ? Command_AddTrackToQueue.fromPartial(object.addToQueue)
      : undefined;
    message.setVolume = object.setVolume ?? undefined;
    message.playResume = object.playResume ?? undefined;
    message.pause = object.pause ?? undefined;
    message.skipNext = object.skipNext ?? undefined;
    message.skipPrevious = object.skipPrevious ?? undefined;
    message.seekToPos = object.seekToPos ?? undefined;
    message.kick = (object.kick !== undefined && object.kick !== null)
      ? Command_Kick.fromPartial(object.kick)
      : undefined;
    message.ban = (object.ban !== undefined && object.ban !== null) ? Command_Ban.fromPartial(object.ban) : undefined;
    message.leaveRoom = object.leaveRoom ?? undefined;
    message.createRole = (object.createRole !== undefined && object.createRole !== null)
      ? Command_CreateRole.fromPartial(object.createRole)
      : undefined;
    message.renameRole = (object.renameRole !== undefined && object.renameRole !== null)
      ? Command_RenameRole.fromPartial(object.renameRole)
      : undefined;
    return message;
  },
};

function createBaseCommand_Kick(): Command_Kick {
  return { userId: "", reason: "" };
}

export const Command_Kick: MessageFns<Command_Kick> = {
  encode(message: Command_Kick, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.reason !== "") {
      writer.uint32(18).string(message.reason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Command_Kick {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommand_Kick();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.reason = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Command_Kick {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
    };
  },

  toJSON(message: Command_Kick): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Command_Kick>, I>>(base?: I): Command_Kick {
    return Command_Kick.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Command_Kick>, I>>(object: I): Command_Kick {
    const message = createBaseCommand_Kick();
    message.userId = object.userId ?? "";
    message.reason = object.reason ?? "";
    return message;
  },
};

function createBaseCommand_Ban(): Command_Ban {
  return { userId: "", reason: "" };
}

export const Command_Ban: MessageFns<Command_Ban> = {
  encode(message: Command_Ban, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.reason !== "") {
      writer.uint32(18).string(message.reason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Command_Ban {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommand_Ban();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.reason = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Command_Ban {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
    };
  },

  toJSON(message: Command_Ban): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Command_Ban>, I>>(base?: I): Command_Ban {
    return Command_Ban.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Command_Ban>, I>>(object: I): Command_Ban {
    const message = createBaseCommand_Ban();
    message.userId = object.userId ?? "";
    message.reason = object.reason ?? "";
    return message;
  },
};

function createBaseCommand_AddTrackToQueue(): Command_AddTrackToQueue {
  return { trackId: "" };
}

export const Command_AddTrackToQueue: MessageFns<Command_AddTrackToQueue> = {
  encode(message: Command_AddTrackToQueue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.trackId !== "") {
      writer.uint32(10).string(message.trackId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Command_AddTrackToQueue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommand_AddTrackToQueue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.trackId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Command_AddTrackToQueue {
    return { trackId: isSet(object.trackId) ? globalThis.String(object.trackId) : "" };
  },

  toJSON(message: Command_AddTrackToQueue): unknown {
    const obj: any = {};
    if (message.trackId !== "") {
      obj.trackId = message.trackId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Command_AddTrackToQueue>, I>>(base?: I): Command_AddTrackToQueue {
    return Command_AddTrackToQueue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Command_AddTrackToQueue>, I>>(object: I): Command_AddTrackToQueue {
    const message = createBaseCommand_AddTrackToQueue();
    message.trackId = object.trackId ?? "";
    return message;
  },
};

function createBaseCommand_CreateRole(): Command_CreateRole {
  return { name: "", permissions: undefined };
}

export const Command_CreateRole: MessageFns<Command_CreateRole> = {
  encode(message: Command_CreateRole, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.permissions !== undefined) {
      RolePermission.encode(message.permissions, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Command_CreateRole {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommand_CreateRole();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.permissions = RolePermission.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Command_CreateRole {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      permissions: isSet(object.permissions) ? RolePermission.fromJSON(object.permissions) : undefined,
    };
  },

  toJSON(message: Command_CreateRole): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.permissions !== undefined) {
      obj.permissions = RolePermission.toJSON(message.permissions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Command_CreateRole>, I>>(base?: I): Command_CreateRole {
    return Command_CreateRole.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Command_CreateRole>, I>>(object: I): Command_CreateRole {
    const message = createBaseCommand_CreateRole();
    message.name = object.name ?? "";
    message.permissions = (object.permissions !== undefined && object.permissions !== null)
      ? RolePermission.fromPartial(object.permissions)
      : undefined;
    return message;
  },
};

function createBaseCommand_RenameRole(): Command_RenameRole {
  return { roleId: new Uint8Array(0), name: "" };
}

export const Command_RenameRole: MessageFns<Command_RenameRole> = {
  encode(message: Command_RenameRole, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roleId.length !== 0) {
      writer.uint32(10).bytes(message.roleId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Command_RenameRole {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommand_RenameRole();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.roleId = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Command_RenameRole {
    return {
      roleId: isSet(object.roleId) ? bytesFromBase64(object.roleId) : new Uint8Array(0),
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: Command_RenameRole): unknown {
    const obj: any = {};
    if (message.roleId.length !== 0) {
      obj.roleId = base64FromBytes(message.roleId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Command_RenameRole>, I>>(base?: I): Command_RenameRole {
    return Command_RenameRole.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Command_RenameRole>, I>>(object: I): Command_RenameRole {
    const message = createBaseCommand_RenameRole();
    message.roleId = object.roleId ?? new Uint8Array(0);
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCommandResponse(): CommandResponse {
  return {
    roomError: undefined,
    room: undefined,
    genericError: undefined,
    kick: undefined,
    ban: undefined,
    spotifyPlaybackState: undefined,
    spotifySearchResult: undefined,
    spotifyRateLimited: undefined,
    roleError: undefined,
  };
}

export const CommandResponse: MessageFns<CommandResponse> = {
  encode(message: CommandResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roomError !== undefined) {
      writer.uint32(8).int32(message.roomError);
    }
    if (message.room !== undefined) {
      Room.encode(message.room, writer.uint32(18).fork()).join();
    }
    if (message.genericError !== undefined) {
      writer.uint32(26).string(message.genericError);
    }
    if (message.kick !== undefined) {
      CommandResponse_Kick.encode(message.kick, writer.uint32(34).fork()).join();
    }
    if (message.ban !== undefined) {
      CommandResponse_Ban.encode(message.ban, writer.uint32(42).fork()).join();
    }
    if (message.spotifyPlaybackState !== undefined) {
      CommandResponse_SpotifyPlaybackState.encode(message.spotifyPlaybackState, writer.uint32(50).fork()).join();
    }
    if (message.spotifySearchResult !== undefined) {
      TrackArray.encode(message.spotifySearchResult, writer.uint32(58).fork()).join();
    }
    if (message.spotifyRateLimited !== undefined) {
      writer.uint32(64).uint64(message.spotifyRateLimited);
    }
    if (message.roleError !== undefined) {
      writer.uint32(72).int32(message.roleError);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommandResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommandResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.roomError = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.room = Room.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.genericError = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.kick = CommandResponse_Kick.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.ban = CommandResponse_Ban.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.spotifyPlaybackState = CommandResponse_SpotifyPlaybackState.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.spotifySearchResult = TrackArray.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.spotifyRateLimited = longToNumber(reader.uint64());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.roleError = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommandResponse {
    return {
      roomError: isSet(object.roomError) ? roomErrorFromJSON(object.roomError) : undefined,
      room: isSet(object.room) ? Room.fromJSON(object.room) : undefined,
      genericError: isSet(object.genericError) ? globalThis.String(object.genericError) : undefined,
      kick: isSet(object.kick) ? CommandResponse_Kick.fromJSON(object.kick) : undefined,
      ban: isSet(object.ban) ? CommandResponse_Ban.fromJSON(object.ban) : undefined,
      spotifyPlaybackState: isSet(object.spotifyPlaybackState)
        ? CommandResponse_SpotifyPlaybackState.fromJSON(object.spotifyPlaybackState)
        : undefined,
      spotifySearchResult: isSet(object.spotifySearchResult)
        ? TrackArray.fromJSON(object.spotifySearchResult)
        : undefined,
      spotifyRateLimited: isSet(object.spotifyRateLimited) ? globalThis.Number(object.spotifyRateLimited) : undefined,
      roleError: isSet(object.roleError) ? roleErrorFromJSON(object.roleError) : undefined,
    };
  },

  toJSON(message: CommandResponse): unknown {
    const obj: any = {};
    if (message.roomError !== undefined) {
      obj.roomError = roomErrorToJSON(message.roomError);
    }
    if (message.room !== undefined) {
      obj.room = Room.toJSON(message.room);
    }
    if (message.genericError !== undefined) {
      obj.genericError = message.genericError;
    }
    if (message.kick !== undefined) {
      obj.kick = CommandResponse_Kick.toJSON(message.kick);
    }
    if (message.ban !== undefined) {
      obj.ban = CommandResponse_Ban.toJSON(message.ban);
    }
    if (message.spotifyPlaybackState !== undefined) {
      obj.spotifyPlaybackState = CommandResponse_SpotifyPlaybackState.toJSON(message.spotifyPlaybackState);
    }
    if (message.spotifySearchResult !== undefined) {
      obj.spotifySearchResult = TrackArray.toJSON(message.spotifySearchResult);
    }
    if (message.spotifyRateLimited !== undefined) {
      obj.spotifyRateLimited = Math.round(message.spotifyRateLimited);
    }
    if (message.roleError !== undefined) {
      obj.roleError = roleErrorToJSON(message.roleError);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommandResponse>, I>>(base?: I): CommandResponse {
    return CommandResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommandResponse>, I>>(object: I): CommandResponse {
    const message = createBaseCommandResponse();
    message.roomError = object.roomError ?? undefined;
    message.room = (object.room !== undefined && object.room !== null) ? Room.fromPartial(object.room) : undefined;
    message.genericError = object.genericError ?? undefined;
    message.kick = (object.kick !== undefined && object.kick !== null)
      ? CommandResponse_Kick.fromPartial(object.kick)
      : undefined;
    message.ban = (object.ban !== undefined && object.ban !== null)
      ? CommandResponse_Ban.fromPartial(object.ban)
      : undefined;
    message.spotifyPlaybackState = (object.spotifyPlaybackState !== undefined && object.spotifyPlaybackState !== null)
      ? CommandResponse_SpotifyPlaybackState.fromPartial(object.spotifyPlaybackState)
      : undefined;
    message.spotifySearchResult = (object.spotifySearchResult !== undefined && object.spotifySearchResult !== null)
      ? TrackArray.fromPartial(object.spotifySearchResult)
      : undefined;
    message.spotifyRateLimited = object.spotifyRateLimited ?? undefined;
    message.roleError = object.roleError ?? undefined;
    return message;
  },
};

function createBaseCommandResponse_Kick(): CommandResponse_Kick {
  return { reason: "" };
}

export const CommandResponse_Kick: MessageFns<CommandResponse_Kick> = {
  encode(message: CommandResponse_Kick, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reason !== "") {
      writer.uint32(10).string(message.reason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommandResponse_Kick {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommandResponse_Kick();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.reason = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommandResponse_Kick {
    return { reason: isSet(object.reason) ? globalThis.String(object.reason) : "" };
  },

  toJSON(message: CommandResponse_Kick): unknown {
    const obj: any = {};
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommandResponse_Kick>, I>>(base?: I): CommandResponse_Kick {
    return CommandResponse_Kick.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommandResponse_Kick>, I>>(object: I): CommandResponse_Kick {
    const message = createBaseCommandResponse_Kick();
    message.reason = object.reason ?? "";
    return message;
  },
};

function createBaseCommandResponse_Ban(): CommandResponse_Ban {
  return { reason: "" };
}

export const CommandResponse_Ban: MessageFns<CommandResponse_Ban> = {
  encode(message: CommandResponse_Ban, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reason !== "") {
      writer.uint32(10).string(message.reason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommandResponse_Ban {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommandResponse_Ban();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.reason = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommandResponse_Ban {
    return { reason: isSet(object.reason) ? globalThis.String(object.reason) : "" };
  },

  toJSON(message: CommandResponse_Ban): unknown {
    const obj: any = {};
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommandResponse_Ban>, I>>(base?: I): CommandResponse_Ban {
    return CommandResponse_Ban.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommandResponse_Ban>, I>>(object: I): CommandResponse_Ban {
    const message = createBaseCommandResponse_Ban();
    message.reason = object.reason ?? "";
    return message;
  },
};

function createBaseCommandResponse_SpotifyPlaybackState(): CommandResponse_SpotifyPlaybackState {
  return { state: undefined, previousTracks: undefined, nextTracks: undefined };
}

export const CommandResponse_SpotifyPlaybackState: MessageFns<CommandResponse_SpotifyPlaybackState> = {
  encode(message: CommandResponse_SpotifyPlaybackState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.state !== undefined) {
      PlaybackState.encode(message.state, writer.uint32(10).fork()).join();
    }
    if (message.previousTracks !== undefined) {
      TrackArray.encode(message.previousTracks, writer.uint32(18).fork()).join();
    }
    if (message.nextTracks !== undefined) {
      TrackArray.encode(message.nextTracks, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommandResponse_SpotifyPlaybackState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommandResponse_SpotifyPlaybackState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.state = PlaybackState.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.previousTracks = TrackArray.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nextTracks = TrackArray.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommandResponse_SpotifyPlaybackState {
    return {
      state: isSet(object.state) ? PlaybackState.fromJSON(object.state) : undefined,
      previousTracks: isSet(object.previousTracks) ? TrackArray.fromJSON(object.previousTracks) : undefined,
      nextTracks: isSet(object.nextTracks) ? TrackArray.fromJSON(object.nextTracks) : undefined,
    };
  },

  toJSON(message: CommandResponse_SpotifyPlaybackState): unknown {
    const obj: any = {};
    if (message.state !== undefined) {
      obj.state = PlaybackState.toJSON(message.state);
    }
    if (message.previousTracks !== undefined) {
      obj.previousTracks = TrackArray.toJSON(message.previousTracks);
    }
    if (message.nextTracks !== undefined) {
      obj.nextTracks = TrackArray.toJSON(message.nextTracks);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommandResponse_SpotifyPlaybackState>, I>>(
    base?: I,
  ): CommandResponse_SpotifyPlaybackState {
    return CommandResponse_SpotifyPlaybackState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommandResponse_SpotifyPlaybackState>, I>>(
    object: I,
  ): CommandResponse_SpotifyPlaybackState {
    const message = createBaseCommandResponse_SpotifyPlaybackState();
    message.state = (object.state !== undefined && object.state !== null)
      ? PlaybackState.fromPartial(object.state)
      : undefined;
    message.previousTracks = (object.previousTracks !== undefined && object.previousTracks !== null)
      ? TrackArray.fromPartial(object.previousTracks)
      : undefined;
    message.nextTracks = (object.nextTracks !== undefined && object.nextTracks !== null)
      ? TrackArray.fromPartial(object.nextTracks)
      : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
